# 00-global.mdc - Global Rules

- 变更最小：只修 blocker + 当前里程碑必需。
- 必须规格先行：每个变更先提交 `documents/` 下的相关文档。
- CI 门禁：必须通过 `flutter analyze` 与 `flutter test`（具体细则由 `analysis_options.yaml` 保障）。
- 页面/Widget 禁止在 `build` 触发副作用（网络/存储/导航）。
- 文案本地化：禁止硬编码用户可见字符串，统一使用 l10n（`flutter gen-l10n`）。
- 新代码必须附最小测试（happy + error）。
- 受保护路径见文档中的配置说明。

### 单行忽略（lint）规范
- 仅在无法通过合理重构或上下文检查满足 lint 时，允许"单行忽略"。
- 必须在同一行追加中文理由，说明为何可安全忽略、已做何防护。
- 示例：
  ```dart
  // ignore: use_build_context_synchronously // 理由：已在上一行 mounted 检查，避免跨异步gap使用context
  ```

### 规格模板与路径
- 变更需先提交前端规格：使用 `documents/` 目录下的相应文档格式。
- 路径规范：`documents/spec/YYMMDD-<module>/` 目录结构。

## YAML 文档约束系统
- `documents/` 下的文档是代码的"设计契约"（Design Contract），用于锁定架构版本，防止 AI 修改偏离既定设计
- **修改代码前必读**：修改任何被文档描述的文件前，必须先读取对应的文档理解设计意图
- **契约优先原则**：如果代码实现和文档描述不一致，优先以文档为准；如果文档描述不合理，应停下来讨论而非自行修改
- **同步更新要求**：重构后必须同步更新对应的文档；如果文件被拆分/删除，对应的文档也要更新/删除
- **文档类型与位置**：
  - `documents/spec/` - 规格设计契约（产品需求、用户故事、技术规范）
  - `documents/config/` - 配置设计契约（主题、环境、本地化、代码规范）
  - `documents/architecture/` - 架构设计契约（组件、数据流、状态管理）
  - `documents/project/` - 项目管理契约（计划、进度、规则、KPI）
  - `documents/plan/` - 迭代执行契约（预览和详细计划）
  - `documents/deployment/` - 部署设计契约（上线、迁移、发布）
  - `documents/legal/` - 法律合规契约（隐私、服务条款）

## 版本控制策略
- **时间触发条件**：比对和上次递交是否超过半小时，超过半小时则提交，否则只用pre-commit验证代码质量。
- **规则同步要求**：当rules发生修改时，`.cursor/rules`和`documents/rules.yaml`应该保持同步。
- 如果没有明确的rules要求`git push`，那就不进行 `git push`，大多数`git commit`都是不需要立刻`git push`的。
- 如果本次修改的只有markdown文件或mdc文件，则不要自动`git commit`,除非用户主动要求或与其他rules相抵触。

## flutter analyze（静态分析）报错和flutter test报错
  - 打开并读取报错的文件，阅读整个代码文件；
  - 分析原因，用打比方举例子的方式进行尽可能通俗的解释。
  - 提出修改意见，包括1:要修改的文件；2.行号；3.原内容；4.修改内容
  - 如果修改量不大，直接修改，如果要改超过三个文件，停下来等待我确认后再继续
  - 修改完成后，判断当前修改用单元测试验证合适还是集成测试合适，看看当前测试是否需要修改，然后执行测试。
  - 我说的集成测试是指项目根目录下的integration_test，直接用macos测试这样就不用连接手机了
  - 测试全部通过后进行flutter analyze进行测试，同样要保证所有failed和error都必须解决，不可绕过递交
  - 所有warning和info请自行判断是按提示解决还是直接屏蔽
  - 通过后git commit提交，但是不要push
  - 到此修改完成

### 界面与交互规则
- 未经用户确认，助手不得修改UI表现。
- 助手在编写任何代码时，如果发现设计存在潜在优化空间（包括 UI 表现、API 契约、交互流程），必须先提出 改进建议，明确说明：
  - 参考的大厂或官方规范；
  - 变更的预期收益；
  - 潜在的影响范围。
- 如果改动没有带来 明显且可度量的收益，应避免调整，保持现状。

### 防止编译错误
如果写代码时遇到flutter analyze或flutter run报错，应该要阅读相关的g.dart文件，精确调用当前版本。这种库经常更新，你所知的版本未必适合我们。

### 重构原则
- lib/presentation 下每个dart文件不能超过600行，lib/core/utils、lib/core/providers、lib/core/services、lib/core/monetization 下的dart文件和lib/main.dart 不能超过400行，超过立刻重构。
- lib下每个方法不能超过60行，超过立刻重构。