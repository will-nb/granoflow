meta:
  id: "250130-tasks-interaction-enhancement"
  title: "任务清单交互体验增强"
  status: draft
  owner: "AI Assistant"
  created: "2025-01-30"
  version: "1.0"

background:
  problem: |
    当前任务清单页面的交互体验存在以下问题：
    1. 滑动操作（左滑推迟、右滑归档）缺乏即时反馈，用户不确定操作是否成功
    2. 已逾期区域的任务推迟逻辑不合理，推迟到明天而不是今日，无法快速处理紧急任务
    3. 缺乏跨区域拖拽功能，用户无法通过拖拽快速调整任务的截止时间
    4. 拖拽到已逾期区域没有限制，可能导致逻辑混乱

  goal: |
    通过增强任务清单的交互体验，提升用户的任务管理效率：
    1. 为所有滑动操作提供清晰的即时反馈
    2. 优化已逾期任务的推迟逻辑，支持快速处理紧急任务
    3. 实现跨区域拖拽功能，让用户能够直观地调整任务时间安排
    4. 建立合理的拖拽限制，避免无效操作

user_flows:
  - name: "滑动操作反馈流程"
    steps:
      - "用户在任务清单页面左滑任务（推迟操作）"
      - "系统执行推迟逻辑并显示成功/失败消息"
      - "用户在任务清单页面右滑任务（归档操作）"
      - "系统执行归档逻辑并显示成功/失败消息"
      - "用户通过 SnackBar 了解操作结果"

  - name: "已逾期任务处理流程"
    steps:
      - "用户查看已逾期区域的任务"
      - "用户左滑推迟已逾期任务"
      - "系统将任务推迟到今日 23:59:59，并移动到今日区域"
      - "系统显示推迟成功消息"

  - name: "跨区域拖拽流程"
    steps:
      - "用户在任务清单页面长按任务开始拖拽"
      - "用户将任务拖拽到目标区域（今日、明日、本周等）"
      - "系统更新任务的截止时间为目标区域第一天的 23:59:59"
      - "系统将任务移动到目标区域并显示成功消息"

  - name: "拖拽限制处理流程"
    steps:
      - "用户尝试将任务拖拽到已逾期区域"
      - "系统拒绝拖拽操作，显示限制提示"
      - "用户将任务拖拽到其他有效区域"
      - "系统正常处理拖拽操作"

ui_behavior:
  layout: |
    任务清单页面保持现有布局结构：
    - 顶部：区域标题（已逾期、今日、明日等）
    - 中间：任务列表，支持滑动和拖拽操作
    - 底部：SnackBar 消息提示区域

  components:
    - name: "DismissibleTaskTile"
      purpose: "任务卡片，支持滑动操作"
      interactions: ["左滑推迟", "右滑归档", "长按拖拽"]
    
    - name: "SnackBar"
      purpose: "显示操作反馈消息"
      interactions: ["自动显示", "点击查看详情", "自动消失"]
    
    - name: "DragTarget"
      purpose: "拖拽目标区域"
      interactions: ["接受拖拽", "显示拖拽预览", "拒绝无效拖拽"]
    
    - name: "TaskSectionPanel"
      purpose: "任务区域面板"
      interactions: ["接受跨区域拖拽", "显示拖拽指示器"]

  states:
    - condition: "滑动操作成功"
      appearance: "显示绿色 SnackBar，包含操作结果和查看按钮"
    
    - condition: "滑动操作失败"
      appearance: "显示红色 SnackBar，包含错误信息"
    
    - condition: "已逾期任务推迟"
      appearance: "任务移动到今日区域，显示推迟到今日的消息"
    
    - condition: "跨区域拖拽成功"
      appearance: "任务移动到目标区域，截止时间更新为区域第一天 23:59:59"
    
    - condition: "拖拽到已逾期区域"
      appearance: "拖拽被拒绝，显示限制提示消息"
    
    - condition: "拖拽悬停"
      appearance: "目标区域高亮显示，显示插入指示器"

business_rules:
  - "已逾期区域的任务推迟必须到今日 23:59:59，不能推迟到明天"
  - "其他区域的任务不能拖拽到已逾期区域"
  - "跨区域拖拽时，任务截止时间自动调整为目标区域第一天的 23:59:59"
  - "所有滑动操作都必须提供即时反馈"
  - "拖拽操作失败时显示明确的错误提示"
  - "种子文件支持相对天数定义：使用数字表示相对于当前日期的偏移天数"
  - "种子文件 dueAt 字段支持以下格式：-2（前天）、-1（昨天）、0（今天）、1（明天）、2（后天）、30（30天后）"

technical_constraints:
  - "保持与现有 SwipeActionHandler 架构的兼容性"
  - "拖拽功能需要与现有的 ReorderableListView 协调工作"
  - "SnackBar 显示需要处理 Dismissible 组件的上下文问题"
  - "跨区域拖拽需要更新任务的 dueAt 和 section 属性"
  - "种子文件解析需要支持相对天数到绝对日期的转换"
  - "SeedTask 模型需要添加 dueAt 字段支持"

success_criteria:
  - "所有滑动操作都有清晰的视觉反馈"
  - "已逾期任务推迟到今日的逻辑正确执行"
  - "跨区域拖拽功能正常工作，截止时间正确更新"
  - "拖拽限制有效防止无效操作"
  - "用户体验流畅，操作结果明确"
  - "种子文件相对天数解析正确工作"
  - "任务按预期出现在正确的区域（已逾期、今日、明日等）"

seed_file_format:
  description: "种子文件支持相对天数格式，使用数字表示相对于当前日期的偏移天数"
  examples:
    - "dueAt: -2  # 前天（已逾期区域）"
    - "dueAt: -1  # 昨天（已逾期区域）"
    - "dueAt: 0   # 今天（今日区域）"
    - "dueAt: 1   # 明天（明日区域）"
    - "dueAt: 2   # 后天（本周区域）"
    - "dueAt: 7   # 一周后（本周区域）"
    - "dueAt: 30  # 30天后（本月区域）"
  benefits:
    - "灵活性：不依赖具体日期，可在任何时候导入"
    - "可维护性：不需要手动计算和更新绝对日期"
    - "可读性：相对天数更直观，容易理解"
    - "测试友好：可轻松创建不同时间段的测试数据"

open_issues:
  - "是否需要为拖拽操作添加撤销功能？"
  - "跨区域拖拽时是否需要在目标区域显示特殊指示器？"
  - "已逾期区域是否应该支持从其他区域拖拽任务？"
  - "SnackBar 的显示时长是否需要根据操作类型调整？"
  - "种子文件相对天数格式是否需要支持更复杂的表达式（如工作日、月末等）？"
  - "相对天数计算是否需要考虑时区问题？"

dependencies:
  - "现有的 SwipeActionHandler 组件"
  - "任务服务的拖拽处理方法"
  - "本地化文本资源"
  - "现有的拖拽目标组件"
  - "种子文件解析和相对天数转换逻辑"
  - "SeedTask 模型扩展"

risks:
  - "拖拽功能可能与现有排序功能冲突"
  - "SnackBar 在 Dismissible 组件中的显示可能不稳定"
  - "跨区域拖拽的性能影响需要测试"
  - "拖拽限制的用户体验需要平衡"

next_steps:
  - "确认设计文档内容"
  - "创建对应的迭代蓝图文档"
  - "扩展 SeedTask 模型支持 dueAt 字段"
  - "实现种子文件相对天数解析逻辑"
  - "更新种子文件使用相对天数格式"
  - "实现滑动操作的消息提醒功能"
  - "优化已逾期任务的推迟逻辑"
  - "实现跨区域拖拽功能"
  - "添加拖拽限制和错误处理"
