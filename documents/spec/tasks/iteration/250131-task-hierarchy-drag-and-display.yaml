meta:
  id: "250131-tasks-hierarchy-drag-and-display"
  title: "任务层级拖拽与展示迭代蓝图"
  based_on: "documents/spec/tasks/design/250131-task-hierarchy-drag-and-display.yaml"
  status: draft
  owner: "AI Assistant"
  created: "2025-01-31"
  version: "1.0"

scope:
  includes:
    - "任务拖拽成为子任务功能（Inbox & Tasks）"
    - "Inbox 手风琴模式层级展示"
    - "Tasks 父任务跟随子任务展示逻辑"
    - "Tasks 父任务在自己区域的完整展示"
    - "拖拽子任务离开父任务功能"
    - "拖拽子任务移动到其他父任务功能"
    - "层级 icon 和视觉指示"
    - "循环引用和层级限制检查"
    - "相关测试用例编写"
  excludes:
    - "项目和里程碑的层级展示（排除在外）"
    - "任务排序功能的修改（保持现有逻辑）"
    - "任务详情页面的修改"
    - "用户界面主题和样式的大幅调整"

changes:
  code_updates:
    - file: "lib/presentation/widgets/task_tile_content.dart"
      type: modify
      intent: "包裹 DragTarget 支持拖拽到任务上成为子任务，实现拖拽检查和变色高亮反馈"
    
    - file: "lib/presentation/inbox/views/inbox_task_list.dart"
      type: modify
      intent: "实现手风琴模式展示层级结构，使用 ExpansionPanelList.radio，支持嵌套子任务展示"
    
    - file: "lib/presentation/tasks/views/task_section_list.dart"
      type: modify
      intent: "实现父任务跟随子任务的展示逻辑，递归显示祖先任务链，最多 3 级"
    
    - file: "lib/presentation/tasks/views/task_section_panel.dart"
      type: modify
      intent: "添加父任务在自己区域的完整展示，支持显示全部子任务列表"
    
    - file: "lib/presentation/tasks/widgets/parent_task_header.dart"
      type: create
      intent: "创建父任务简化标题组件（跟随子任务位置），包含跳转和显示全部子任务按钮"
    
    - file: "lib/presentation/tasks/widgets/parent_task_in_own_section.dart"
      type: create
      intent: "创建父任务在自己区域的完整展示组件，支持显示全部子任务列表"
    
    - file: "lib/presentation/tasks/widgets/all_children_list.dart"
      type: create
      intent: "创建所有子任务列表组件，显示标题/截止日期/任务状态，不可编辑，支持点击跳转到对应区域或 Inbox"
    
    - file: "lib/presentation/tasks/widgets/ancestor_task_chain.dart"
      type: create
      intent: "创建祖先任务链组件，递归显示祖任务→父任务→当前任务，排除项目和里程碑"
    
    - file: "lib/presentation/tasks/utils/hierarchy_utils.dart"
      type: create
      intent: "创建层级工具函数，包括循环引用检查、层级深度计算、过滤项目和里程碑等"
    
    - file: "lib/core/services/task_hierarchy_service.dart"
      type: modify
      intent: "扩展 moveToParent 方法，支持计算合适的 sortIndex，集成层级深度验证和循环引用检查"
    
    - file: "lib/data/repositories/task_repository.dart"
      type: modify
      intent: "在 listChildren 方法中添加 trashed 状态过滤，确保伪删除任务不返回"
    
    - file: "lib/core/utils/task_status_utils.dart"
      type: create
      intent: "创建任务状态映射工具函数，将 TaskStatus 映射到可读的状态文本（收集箱/列入清单/已完成/已归档/丢弃到回收站）"
    
    - file: "lib/presentation/widgets/drag_to_remove_handler.dart"
      type: create
      intent: "创建拖拽离开父任务的处理器，支持拖到空白处移除父子关系"
    
    - file: "lib/l10n/app_zh_CN.arb"
      type: modify
      intent: "添加层级展示相关的本地化文本（跳转按钮、显示全部子任务、任务状态等）"
    
    - file: "lib/l10n/app_en.arb"
      type: modify
      intent: "添加层级展示相关的本地化文本"
    
    - file: "lib/l10n/app_zh_HK.arb"
      type: modify
      intent: "添加层级展示相关的本地化文本"
    
    - file: "lib/l10n/app_zh.arb"
      type: modify
      intent: "添加层级展示相关的本地化文本"

  data_model:
    - entity: "Task"
      change: "保持现有 parentId 字段不变，确保兼容性"
    - entity: "TaskUpdate"
      change: "保持现有 parentId 字段不变，确保兼容性"
    - entity: "TaskRepository"
      change: "使用现有的 listChildren 方法，无需修改"

  tests:
    - type: unit
      focus: "层级工具函数：循环引用检查、层级深度计算、过滤项目和里程碑"
      location: "test/presentation/tasks/utils/hierarchy_utils_test.dart"
    
    - type: unit
      focus: "TaskTileContent DragTarget 拖拽检查和接受逻辑"
      location: "test/presentation/widgets/task_tile_content_test.dart"
    
    - type: unit
      focus: "TaskHierarchyService.moveToParent sortIndex 计算逻辑、层级深度验证、循环引用检查"
      location: "test/core/services/task_hierarchy_service_test.dart"
    
    - type: unit
      focus: "TaskRepository.listChildren trashed 状态过滤逻辑"
      location: "test/data/repositories/task_repository_test.dart"
    
    - type: unit
      focus: "任务状态映射工具函数（TaskStatus 到可读文本）"
      location: "test/core/utils/task_status_utils_test.dart"
    
    - type: widget
      focus: "Inbox 手风琴模式展示和展开/收起交互"
      location: "test/presentation/inbox/views/inbox_task_list_test.dart"
    
    - type: widget
      focus: "Tasks 父任务跟随子任务展示和层级链显示"
      location: "test/presentation/tasks/views/task_section_list_test.dart"
    
    - type: widget
      focus: "父任务在自己区域的完整展示和显示全部子任务列表，子任务点击跳转功能"
      location: "test/presentation/tasks/views/task_section_panel_test.dart"
    
    - type: widget
      focus: "拖拽成为子任务的交互和视觉反馈"
      location: "test/presentation/widgets/task_tile_content_test.dart"
    
    - type: widget
      focus: "拖拽离开父任务的交互"
      location: "test/presentation/widgets/drag_to_remove_handler_test.dart"
    
    - type: integration
      focus: "完整的拖拽成为子任务端到端流程（Inbox & Tasks）"
      location: "integration_test/task_hierarchy_drag_test.dart"
    
    - type: integration
      focus: "层级展示和导航的端到端测试"
      location: "integration_test/task_hierarchy_display_test.dart"

  documentation:
    - path: "documents/spec/tasks/design/250131-task-hierarchy-drag-and-display.yaml"
      update_type: modify
      reason: "根据实现过程中的发现更新设计细节"
    - path: "documents/architecture/widgets/task_tile_content.yaml"
      update_type: create
      reason: "记录 TaskTileContent DragTarget 实现的架构设计"
    - path: "documents/architecture/pages/inbox_page.yaml"
      update_type: modify
      reason: "更新 Inbox 页面手风琴模式展示的架构文档"
    - path: "documents/architecture/pages/task_list_page.yaml"
      update_type: modify
      reason: "更新 Tasks 页面父任务跟随子任务展示的架构文档"

risks:
  - name: "ExpansionPanelList 不支持 ReorderableListView，拖拽排序可能需要调整"
    mitigation: "评估是否需要在手风琴模式下调整拖拽排序的实现方式，或提供替代方案"
  
  - name: "递归显示祖先任务可能影响性能（需要多次查询）"
    mitigation: "考虑缓存查询结果，优化查询逻辑，避免重复查询同一任务"
  
  - name: "父任务在多个区域重复出现可能导致用户困惑"
    mitigation: "通过视觉设计（简化标题 vs 完整功能）清晰区分不同位置的展示"
  
  - name: "循环引用检查需要递归查询，可能影响性能"
    mitigation: "实现高效的循环引用检查算法，考虑限制检查深度"
  
  - name: "DragTarget 的原生变色功能可能被禁用"
    mitigation: "检查并启用 DragTarget 的原生变色功能，确保视觉反馈清晰"
  
  - name: "层级 icon 的选择和设计"
    mitigation: "查看 Material Icons 库，选择风格一致的层级指示图标，保持设计一致性"
  
  - name: "拖拽交互的视觉反馈需要精细调整"
    mitigation: "多次测试和调整，确保拖拽时的视觉反馈清晰且不干扰用户操作"

verification:
  checklist:
    - "运行 flutter test 确保所有单元测试通过"
    - "运行 flutter test integration_test 确保集成测试通过"
    - "运行 flutter analyze 确保代码质量检查通过"
    - "测试拖拽任务成为子任务功能（Inbox & Tasks）"
    - "测试拖拽时的变色高亮反馈"
    - "测试 Inbox 手风琴模式展示和展开/收起交互"
    - "测试 Tasks 父任务跟随子任务展示逻辑"
    - "测试递归显示祖先任务链（最多 3 级）"
    - "测试父任务在自己区域的完整展示"
    - "测试显示全部子任务列表功能"
    - "测试拖拽子任务离开父任务功能"
    - "测试拖拽子任务移动到其他父任务功能"
    - "测试循环引用检查（不能拖到自己的子任务）"
    - "测试层级限制（最多 3 级，第三级不能添加子任务）"
    - "测试项目和里程碑排除（不能作为父任务显示）"
    - "测试锁定检查（被锁定的任务不能成为父任务或移动）"
    - "测试子任务列表点击跳转功能（跳转到对应区域或 Inbox）"
    - "验证本地化文本在所有支持的语言中正确显示"
    - "在不同设备上测试拖拽交互体验"
    - "测试伪删除状态的子任务不显示在列表中"

implementation_phases:
  phase_1_core_drag:
    title: "核心拖拽功能：拖拽成为子任务"
    tasks:
      - "修改 TaskTileContent 包裹 DragTarget"
      - "实现拖拽检查和接受逻辑"
      - "实现拖拽时的变色高亮反馈"
      - "实现 TaskHierarchyService.moveToParent 的 sortIndex 计算"
      - "创建层级工具函数（循环引用检查、层级深度计算、项目/里程碑过滤）"
      - "创建任务状态映射工具函数"
      - "在 TaskHierarchyService.moveToParent 中集成层级深度验证"
      - "编写相关单元测试"
    estimated_effort: "4-5 小时"
    dependencies: []
  
  phase_2_inbox_display:
    title: "Inbox 手风琴模式展示"
    tasks:
      - "修改 InboxTaskList 实现手风琴模式"
      - "使用 ExpansionPanelList.radio"
      - "支持嵌套子任务展示"
      - "处理父任务跟随子任务的根任务过滤"
      - "编写相关测试用例"
    estimated_effort: "3-4 小时"
    dependencies: ["phase_1_core_drag"]
  
  phase_3_tasks_display:
    title: "Tasks 父任务跟随子任务展示"
    tasks:
      - "创建 ParentTaskHeader 组件（简化标题）"
      - "创建 AncestorTaskChain 组件（递归显示）"
      - "修改 TaskSectionList 实现父任务跟随子任务逻辑"
      - "实现层级 icon 显示"
      - "实现跳转按钮功能"
      - "排除项目和里程碑"
      - "编写相关测试用例"
    estimated_effort: "5-6 小时"
    dependencies: ["phase_1_core_drag"]
  
  phase_4_parent_own_section:
    title: "父任务在自己区域的完整展示"
    tasks:
      - "创建 ParentTaskInOwnSection 组件"
      - "创建 AllChildrenList 组件"
      - "修改 TaskSectionPanel 集成父任务完整展示"
      - "实现显示全部子任务列表功能"
      - "实现子任务状态显示（标题/截止日期/状态）"
      - "实现子任务点击跳转功能（跳转到对应区域或 Inbox）"
      - "过滤伪删除状态的子任务"
      - "编写相关测试用例"
    estimated_effort: "4-5 小时"
    dependencies: ["phase_3_tasks_display"]
  
  phase_5_drag_remove:
    title: "拖拽离开父任务功能"
    tasks:
      - "创建 DragToRemoveHandler 组件"
      - "实现拖到空白处移除父子关系"
      - "实现拖到其他父任务功能（复用 phase_1 逻辑）"
      - "编写相关测试用例"
    estimated_effort: "2-3 小时"
    dependencies: ["phase_1_core_drag"]
  
  phase_6_localization:
    title: "本地化文本和视觉优化"
    tasks:
      - "添加所有必要的本地化文本"
      - "优化层级 icon 的选择和显示"
      - "调整视觉反馈（颜色、动画等）"
      - "验证所有语言的本地化文本"
    estimated_effort: "2-3 小时"
    dependencies: ["phase_2_inbox_display", "phase_3_tasks_display", "phase_4_parent_own_section"]
  
  phase_7_testing_integration:
    title: "测试和集成验证"
    tasks:
      - "运行完整的测试套件"
      - "进行端到端测试"
      - "性能测试和优化"
      - "文档更新"
      - "代码审查和优化"
    estimated_effort: "3-4 小时"
    dependencies: ["phase_5_drag_remove", "phase_6_localization"]

total_estimated_effort: "23-30 小时"

dependencies:
  - "现有的 TaskTileContent 组件架构"
  - "TaskHierarchyService.moveToParent 方法"
  - "TaskRepository.listChildren 方法"
  - "collectRoots 工具函数"
  - "ExpansionPanelList.radio 组件"
  - "Theme 颜色系统"
  - "Material Icons 库"
  - "Flutter 测试框架和工具"
  - "现有的拖拽系统（StandardDraggable、StandardDragTarget）"

rollback_strategy:
  - "保留原始 InboxTaskList 和 TaskSectionList 的备份实现"
  - "通过特性开关控制新功能的启用（如果需要）"
  - "保持 TaskTileContent 的向后兼容性"
  - "准备回滚到原始展示逻辑的代码分支"
  - "维护原始拖拽功能的备份实现"

technical_notes:
  - "层级 icon 选择：优先使用 Material Icons 中的 subdirectory_arrow_right 或类似图标，保持风格一致"
  - "颜色使用：从 Theme.colorScheme.surfaceContainerHighest 获取，不硬编码"
  - "性能优化：考虑缓存祖先任务查询结果，避免重复查询"
  - "循环引用检查：实现高效的递归检查，限制最大检查深度"
  - "项目/里程碑过滤：使用 Task.taskKind 字段判断，TaskKind.project 和 TaskKind.milestone 不计入层级"
  - "子任务状态显示：需要将 TaskStatus 映射到可读的状态文本（收集箱/列入清单/已完成/已归档/丢弃到回收站）"

refactoring_principles:
  code_reuse:
    - "层级相关的工具函数统一抽象到 hierarchy_utils.dart，包括：循环引用检查、层级深度计算、项目/里程碑过滤、层级链构建等"
    - "拖拽检查逻辑（canAcceptAsChild）统一实现，在 TaskTileContent 中复用"
    - "父任务展示逻辑在多个组件中复用（ParentTaskHeader、AncestorTaskChain），确保一致性"
    - "子任务状态映射逻辑抽象为独立函数或扩展方法，在 AllChildrenList 和其他需要显示状态的地方复用"
    - "颜色和样式使用统一的 Theme 值，避免硬编码，确保主题一致性"
  
  abstraction_levels:
    utils:
      - "hierarchy_utils.dart：所有层级相关的纯函数逻辑（计算、验证、过滤）"
      - "状态映射逻辑：TaskStatus 到可读文本的映射函数"
    
    widgets:
      - "ParentTaskHeader：父任务简化标题组件（跟随子任务位置）"
      - "AncestorTaskChain：祖先任务链组件（递归显示）"
      - "AllChildrenList：所有子任务列表组件（可复用）"
      - "ParentTaskInOwnSection：父任务在自己区域的完整展示组件"
      - "DragToRemoveHandler：拖拽离开父任务的处理器（可复用）"
    
    services:
      - "TaskHierarchyService：扩展 moveToParent 方法，集成层级深度验证"
      - "层级深度验证逻辑应在 Service 层统一调用 hierarchy_utils 的函数"
  
  data_model_constraints:
    - "第三级不能添加子任务的限制：不在 Model 层（Task 类）实现，而是在 Service 层（TaskHierarchyService.moveToParent）中通过 hierarchy_utils 验证"
    - "原因：这是业务规则，不是数据模型约束，应该在业务逻辑层验证"
    - "实现方式：在 moveToParent 中调用 hierarchy_utils.calculateHierarchyDepth() 检查，如果达到上限则抛出异常"
  
  filtering_rules:
    - "伪删除状态过滤：在所有展示子任务列表的地方统一过滤 trashed 状态"
    - "listChildren 方法：需要添加过滤 trashed 状态的逻辑（.statusNotEqualTo(TaskStatus.trashed)）"
    - "AllChildrenList 组件：在显示子任务列表时，额外过滤一次 trashed 状态（双重保障）"
    - "规则：伪删除（trashed）一律视为已删除，不在任何层级展示中显示"
    - "实现位置：Repository 层（listChildren）和 Presentation 层（AllChildrenList）双重过滤"
  
  code_organization:
    - "层级相关的所有逻辑集中在 lib/presentation/tasks/utils/hierarchy_utils.dart"
    - "避免在多个组件中重复实现相同的层级检查逻辑"
    - "层级 icon 的选择和使用统一在 hierarchy_utils 或专门的常量文件中定义"
    - "状态映射逻辑统一在 lib/core/utils/task_status_utils.dart 或类似位置"

implementation_constraints:
  repository_layer:
    - "TaskRepository.listChildren 必须过滤 trashed 状态，确保伪删除任务不返回"
    - "修改位置：lib/data/repositories/task_repository.dart 的 listChildren 方法"
    - "实现：在查询中添加 .statusNotEqualTo(TaskStatus.trashed) 过滤条件"
  
  service_layer:
    - "TaskHierarchyService.moveToParent 必须验证层级深度限制"
    - "使用 hierarchy_utils.calculateHierarchyDepth() 检查，超过 3 级抛出异常"
    - "同时验证循环引用（使用 hierarchy_utils.hasCircularReference()）"
    - "验证锁定状态（使用 task.canEditStructure）"
  
  presentation_layer:
    - "AllChildrenList 组件额外过滤 trashed 状态（作为双重保障）"
    - "所有显示子任务列表的地方，都要确保不显示 trashed 状态的任务"
    - "使用统一的过滤函数，避免重复实现"

