meta:
  name: GranoFlow技术规范
  version: 1.0
  author: 开发团队
  created_date: 251022
  last_updated: 251022
  description: >
    GranoFlow项目的技术规范文档，基于cards_flutter项目的实际技术栈和配置，
    定义技术选型、开发环境配置、代码规范、构建部署策略等开发相关配置。

tech_stack:
  frontend_framework:
    name: Flutter
    version: ">=3.8.0 <4.0.0"
    reason: 跨平台支持、性能优异、生态丰富（基于cards_flutter项目配置）
  state_management:
    name: Provider + Riverpod
    reason: 灵活的状态管理，支持依赖注入和响应式编程
  local_database:
    name: Isar
    version: ^3.1.0
    reason: 高性能对象数据库、类型安全、Flutter原生支持（基于项目实际使用）
  routing:
    name: go_router
    version: ^16.0.0
    reason: 类型安全路由、嵌套路由支持、参数传递便捷（项目实际使用）
  http_client:
    name: dio
    version: ^5.9.0
    reason: 功能强大、拦截器支持、错误处理完善（项目实际使用）
  ui_framework:
    name: Material Design 3 + 自定义设计系统
    reason: 现代化设计语言、组件丰富、主题系统完善（基于项目设计系统）

development_environment:
  required_tools:
    - flutter_sdk: ">=3.8.0"
    - dart_sdk: ">=3.0.0"
    - android_studio: "Arctic Fox或更高版本"
    - xcode: "14.0或更高版本（仅macOS）"
    - git: "最新版本"
    - isar_cli: 配合Isar数据库使用
  recommended_tools:
    - vscode: Flutter/Dart插件支持优秀
    - fvm: Flutter版本管理
    - melos: 多包管理
  additional_dependencies:
    - flutter_svg: ^2.0.10 (SVG图片支持)
    - flutter_secure_storage: ^9.2.2 (安全存储)
    - file_picker: ^8.1.2 (文件选择)
    - url_launcher: ^6.2.5 (URL启动)
    - permission_handler: ^12.0.1 (权限处理)
  development_setup:
    - flutter_doctor: 确保环境正常
    - isar_generator: ^3.1.0 (Isar数据库代码生成)
    - build_runner: ^2.4.11 (通用代码生成工具)
    - retrofit_generator: ^8.2.1 (API客户端代码生成)
    - json_serializable: ^6.7.1 (JSON序列化代码生成)
  debugging_tools:
    - flutter_inspector: UI调试和布局检查
    - dart_devtools: 性能分析、内存泄露检测、网络请求监控
    - isar_inspector: 数据库内容查看和调试
    - integration_test: 端到端测试框架

code_standards:
  naming_conventions:
    - classes: PascalCase
    - methods: camelCase
    - variables: camelCase
    - constants: SCREAMING_SNAKE_CASE
    - files: snake_case.dart
  code_style:
    - line_length: 100字符
    - indentation: 2空格
    - trailing_commas: 启用
    - prefer_single_quotes: true
  folder_structure:
    lib:
      - core: 核心业务逻辑和配置
      - data: 数据层（models, repositories）
      - presentation: 表现层（pages, widgets）
      - generated: 自动生成代码
    test:
      - unit: 单元测试
      - integration: 集成测试
      - widget: 组件测试
  import_organization:
    - dart核心库
    - 第三方包（按字母顺序）
    - 项目内模块（按依赖层级）

build_deployment:
  build_configuration:
    android:
      - min_sdk: 21 (Android 5.0)
      - target_sdk: 34 (Android 14)
      - compile_sdk: 34 (Android 14)
    ios:
      - deployment_target: 12.0
      - swift_version: 5.0
    web:
      - generate: true
      - background_color: "#4A90E2"
      - theme_color: "#B0BEC5"
  build_types:
    debug:
      - 启用调试模式
      - 包含调试信息
      - 禁用代码混淆
    release:
      - 启用代码混淆
      - 移除调试信息
      - 开启ProGuard优化
  deployment_strategy:
    platforms:
      - google_play: Android应用分发
      - app_store: iOS应用分发
      - github_releases: 桌面版本分发
    versioning:
      - semantic_versioning: 语义化版本
      - build_number: 自动递增

theme_design:
  color_system:
    primary_colors:
      primary: "#2B5797" (深蓝色，对色盲友好)
      on_primary: "#FFFFFF" (纯白色)
    background_colors:
      background: "#F5F5F5" (浅灰色背景)
      surface: "#FFFFFF" (纯白色表面)
      on_surface: "#000000" (纯黑色文字)
    accent_colors:
      secondary: "#4A4A4A" (深灰色次要元素)
      accent: "#9C27B0" (紫色强调色)
      success: "#2E7D32" (深绿色成功色)
      warning: "#F57F17" (深橙色警告色)
      error: "#B71C1C" (深红色错误色)
      info: "#1565C0" (信息蓝色)
    text_colors:
      text_primary: "#000000" (主要文字)
      text_secondary: "#4A4A4A" (次要文字)
      text_hint: "#757575" (提示文字)
    functional_colors:
      divider: "#E0E0E0" (分割线颜色)
typography:
  font_families:
    primary: "Inter"
    fallback: "Noto Sans"
    monospace: "JetBrains Mono"
    multi_language_support:
      - chinese_simplified: "NotoSansSC"
      - chinese_traditional: "NotoSansTC"
      - japanese: "NotoSansJP"
      - korean: "NotoSansKR"
      - thai: "NotoSansThai"
  font_sizes:
    display_large: 57px
    display_medium: 45px
    headline_large: 32px
    title_large: 22px
    body_large: 16px
    label_large: 14px
  responsive_typography:
    base_size: 16px
    scale_factors: [0.875, 1.0, 1.125, 1.25] (小、正常、大、超大)
  icon_system:
    sources:
      - material_icons: 主要图标来源
      - custom_icons: 项目特定图标
    sizes:
      small: 18px
      medium: 24px
      large: 36px
  spacing_system:
    scale: 16px基准单位（基于项目实际使用）
    values:
      small: 8.0
      medium: 16.0
      large: 24.0
      x_large: 32.0
    border_radius:
      default: 8.0
      list_tile: 12.0
    elevation:
      card: 1.0

architecture_decisions:
  project_structure:
    feature_based: 按功能模块组织代码（core、data、presentation）
    layer_separation: 数据层（models、repositories）、业务逻辑层（services、providers）、表现层（pages、widgets）
    shared_components: 公共组件和设计系统独立维护
    generated_code: 自动生成的代码分离存放
  state_management:
    provider_riverpod: 使用Provider和Riverpod进行状态管理
    notifier_inheritance: 继承ChangeNotifier和Notifier实现
    reactive_ui: UI自动响应状态变化，支持依赖注入
  data_flow:
    unidirectional: 单向数据流设计，从数据源到UI
    immutable_updates: 不可变状态更新，减少副作用
    optimistic_ui: 乐观更新UI反馈，提升用户体验
  error_handling:
    centralized: 统一错误处理中心（error_handler.dart）
    user_friendly: 用户友好的错误提示和恢复机制
    logging: 详细错误日志记录，支持不同级别日志

testing_strategy:
  test_types:
    unit_tests:
      coverage_target: 80%
      mock_dependencies: 使用mockito模拟依赖
      test_doubles: 为外部依赖创建测试替身
      repository_testing: 测试数据访问层
      service_testing: 测试业务逻辑层
    integration_tests:
      database_testing: 测试Isar数据库操作（实际数据库）
      widget_testing: 测试UI组件交互和状态变化
      end_to_end: 完整用户流程测试（需要真机/模拟器）
      api_integration: 测试网络请求和响应处理
  testing_tools:
    - flutter_test: Flutter官方测试框架
    - mockito: ^5.4.4 (依赖模拟)
    - build_runner: ^2.4.11 (测试代码生成)
    - integration_test: Flutter官方集成测试框架
    - flutter_lints: ^6.0.0 (代码质量检查)

performance_optimization:
  rendering_performance:
    list_optimization: 使用ListView.builder优化长列表
    image_optimization: 图片懒加载和尺寸优化
    animation_optimization: 60fps动画性能保证
  memory_management:
    memory_leaks: 避免内存泄露
    object_pooling: 对象池复用
    lazy_loading: 按需加载资源
  battery_optimization:
    background_tasks: 最小化后台任务
    network_requests: 批量网络请求
    computation_offloading: 主线程计算优化

security_considerations:
  local_data_security:
    sensitive_data: 敏感数据加密存储（flutter_secure_storage）
    access_control: 本地数据访问控制，仅限应用内部访问
    data_validation: 输入数据验证和边界检查
    database_security: Isar数据库本地加密存储
  privacy_protection:
    local_only: 纯离线应用，无远程数据传输或云端存储
    no_tracking: 不收集任何用户行为数据或分析信息
    data_minimization: 只存储完成任务所需的最少数据
    no_external_sharing: 数据完全本地化，不与第三方共享
  code_security:
    dependency_audit: 定期审计第三方依赖安全漏洞
    secure_coding: 遵循OWASP安全编码实践
    vulnerability_scanning: 使用安全扫描工具检查代码漏洞
    input_sanitization: 所有用户输入都经过验证和清理
