meta:
  name: "Provider 名称"
  type: "provider"
  file_path: "lib/core/providers/xxx.dart"
  description: "Provider 描述"
  version: "1.0"
  created_date: "YYMMDD"
  last_updated: "YYMMDD"

provider_definition:
  name: "ProviderName"
  layer: "dependency_injection"
  pattern: "provider|state_provider|stream_provider|future_provider"
  scope: "global|local|family"
  auto_dispose: true|false
  
provider_types:
  - name: "Provider"
    description: "基础 Provider，用于依赖注入"
    usage: "依赖注入、单例管理"
    
  - name: "StateProvider"
    description: "状态 Provider，用于简单状态管理"
    usage: "简单状态、计数器、开关"
    
  - name: "StateNotifierProvider"
    description: "状态通知器 Provider，用于复杂状态管理"
    usage: "复杂状态、业务逻辑、状态转换"
    
  - name: "StreamProvider"
    description: "流 Provider，用于异步数据流"
    usage: "实时数据、数据库监听、网络流"
    
  - name: "FutureProvider"
    description: "未来 Provider，用于异步操作"
    usage: "一次性异步操作、初始化、配置加载"
    
  - name: "ChangeNotifierProvider"
    description: "变更通知器 Provider，用于 Flutter 状态管理"
    usage: "Flutter 状态、UI 更新、通知"
    
providers:
  - name: "providerName"
    type: "Provider|StateProvider|StreamProvider|FutureProvider"
    return_type: "返回类型"
    dependencies:
      - name: "依赖名"
        type: "依赖类型"
        description: "依赖描述"
    description: "Provider 描述"
    auto_dispose: true|false
    family: true|false
    keep_alive: true|false
    
  - name: "stateProviderName"
    type: "StateProvider"
    return_type: "状态类型"
    initial_value: "初始值"
    description: "状态 Provider 描述"
    auto_dispose: true|false
    
  - name: "streamProviderName"
    type: "StreamProvider"
    return_type: "流数据类型"
    dependencies:
      - name: "依赖名"
        type: "依赖类型"
        description: "依赖描述"
    description: "流 Provider 描述"
    auto_dispose: true|false
    
  - name: "futureProviderName"
    type: "FutureProvider"
    return_type: "未来数据类型"
    dependencies:
      - name: "依赖名"
        type: "依赖类型"
        description: "依赖描述"
    description: "未来 Provider 描述"
    auto_dispose: true|false
    keep_alive: true|false
    
imports:
  - "package:flutter_riverpod/flutter_riverpod.dart"
  - "package:flutter/material.dart"
  - "package:isar/isar.dart"
  - "其他实际导入的包"
  
dependencies:
  - name: "Repository"
    type: "data/repositories/xxx_repository.dart"
    description: "数据访问层依赖"
  - name: "Service"
    type: "core/services/xxx_service.dart"
    description: "业务逻辑服务依赖"
  - name: "Model"
    type: "data/models/xxx.dart"
    description: "领域模型依赖"
  - name: "Isar"
    type: "package:isar/isar.dart"
    description: "数据库依赖"
    
responsibilities:
  - "依赖注入管理"
  - "状态管理"
  - "生命周期管理"
  - "资源管理"
  - "配置管理"
  - "服务协调"
  
provider_categories:
  repository_providers:
    - name: "repositoryProvider"
      description: "仓库 Provider"
      type: "Provider"
      return_type: "Repository"
      
  service_providers:
    - name: "serviceProvider"
      description: "服务 Provider"
      type: "Provider"
      return_type: "Service"
      
  state_providers:
    - name: "stateProvider"
      description: "状态 Provider"
      type: "StateProvider"
      return_type: "StateType"
      
  stream_providers:
    - name: "streamProvider"
      description: "流 Provider"
      type: "StreamProvider"
      return_type: "StreamType"
      
  future_providers:
    - name: "futureProvider"
      description: "未来 Provider"
      type: "FutureProvider"
      return_type: "FutureType"
      
  app_providers:
    - name: "appProvider"
      description: "应用 Provider"
      type: "Provider|StreamProvider|FutureProvider"
      return_type: "AppType"
      
lifecycle_management:
  - phase: "initialization"
    description: "初始化阶段"
    operations: ["依赖注入", "配置加载", "状态初始化"]
  - phase: "operation"
    description: "运行阶段"
    operations: ["状态管理", "数据监听", "服务协调"]
  - phase: "disposal"
    description: "清理阶段"
    operations: ["资源释放", "状态重置", "连接关闭"]
    
state_management:
  - pattern: "状态管理模式"
    description: "状态管理描述"
    implementation: "实现方式"
    benefits: "优势"
    
error_handling:
  - exception: "异常类型"
    description: "异常描述"
    handling: "处理方式"
    recovery: "恢复策略"
    
performance_considerations:
  - operation: "操作名"
    optimization: "优化策略"
    description: "性能考虑"
    caching: "缓存策略"
    
testing_strategy:
  unit_tests:
    - name: "test_provider_creation"
      description: "测试 Provider 创建"
    - name: "test_provider_dependencies"
      description: "测试 Provider 依赖"
    - name: "test_provider_state"
      description: "测试 Provider 状态"
    - name: "test_provider_lifecycle"
      description: "测试 Provider 生命周期"
    - name: "test_provider_disposal"
      description: "测试 Provider 清理"
      
  integration_tests:
    - name: "test_provider_integration"
      description: "测试 Provider 集成"
    - name: "test_provider_coordination"
      description: "测试 Provider 协调"
    - name: "test_provider_state_flow"
      description: "测试 Provider 状态流"
      
  mock_strategy:
    - name: "MockProvider"
      description: "Mock 实现用于测试"
    - name: "FakeProvider"
      description: "Fake 实现用于测试"
    - name: "TestProvider"
      description: "测试专用 Provider"
      
provider_families:
  - name: "familyName"
    description: "Provider 家族描述"
    parameters:
      - name: "参数名"
        type: "参数类型"
        description: "参数描述"
    usage: "使用场景"
    benefits: "优势"
    
provider_scopes:
  - name: "global"
    description: "全局作用域"
    usage: "应用级别的 Provider"
    lifecycle: "应用生命周期"
    
  - name: "local"
    description: "局部作用域"
    usage: "组件级别的 Provider"
    lifecycle: "组件生命周期"
    
  - name: "family"
    description: "家族作用域"
    usage: "参数化的 Provider"
    lifecycle: "参数生命周期"
