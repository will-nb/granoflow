meta:
  summary: >
    Service layer orchestration for GranoFlow. Services compose repositories,
    enforce business rules (status transitions, hierarchy guards), and expose
    intent-driven APIs for Riverpod providers and presentation logic.
  conventions:
    error_handling: Throw domain-specific exceptions (e.g. InvalidTaskOperation)
      when business guards fail; UI layer maps them to toasts/snackbars.
    metrics_hook: Services touching Task or FocusSession data trigger
      MetricRepository.recompute with appropriate reasons.
  source_of_truth:
    - documents/architecture/models.yaml
    - documents/architecture/repositories.yaml
    - documents/product_requirements.yaml
    - documents/user_stories.md

services:
  - name: TaskService
    description: >
      Central coordinator for task creation, planning, editing, and lifecycle
      transitions. Protects completed leaves from structural edits and normalizes
      due dates before persistence.
    depends_on: [TaskRepository, TagRepository, MetricRepository]
    responsibilities:
      - Capture new ideas into inbox with generated taskId.
      - Schedule tasks by applying due dates (converted to local 23:59:59).
      - Update task metadata (title, description, tags) with guardrails.
      - Maintain inbox tag selections via helper APIs for context/priority filters.
      - Orchestrate status transitions (pending↔doing, complete, archive) while respecting template locks.
      - Trigger metric recompute after meaningful mutations.
    methods:
      - name: captureInboxTask
        params:
          - title: String
          - description: String?
          - tags: List<String>
        returns: Future<Task>
      - name: planTask
        params:
          - taskId: int
          - dueDateLocal: DateTime
          - section: TaskSection
        returns: Future<void>
        notes: Converts to local 23:59:59, persists via repository, recomputes metrics.
      - name: updateDetails
        params:
          - taskId: int
          - payload: TaskUpdate
        returns: Future<void>
      - name: updateTags
        params:
          - taskId: int
          - contextTag: String?
          - priorityTag: String?
        returns: Future<void>
        notes: 合并成标准 tags 列表并调用 updateDetails；空值表示清除对应类别。
      - name: markInProgress
        params:
          - taskId: int
        returns: Future<void>
      - name: markCompleted
        params:
          - taskId: int
        returns: Future<void>
        notes: >
          Ensures task is leaf and not template-locked. Supports instant-complete
          flow for tutorial tasks by allowing completion without active session.
      - name: archive
        params:
          - taskId: int
        returns: Future<void>
      - name: softDelete
        params:
          - taskId: int
        returns: Future<void>
        notes: Moves to trash, schedules purge job, triggers metric recompute; disallowed when templateLockCount > 0.
      - name: applyTemplate
        params:
          - templateId: int
          - overrides: TaskTemplateOverrides
        returns: Future<Task>
        notes: Delegates to TaskTemplateService to fetch blueprint then creates task with inherited fields.

  - name: TaskHierarchyService
    description: >
      Handles drag-and-drop operations, including reordering and forming parent/child
      relationships. Applies guards so completed leaves remain immutable and depth
      limits are respected.
    depends_on: [TaskRepository, MetricRepository]
    responsibilities:
      - Maintain consistent sortIndex per section/root.
      - Allow dragging into/from root nodes in edit mode with single root expansion.
      - Reject attempts to add children to completed/archived or template-locked leaves.
      - Propagate due date changes when moving across sections.
    methods:
      - name: reorderWithinSection
        params:
          - taskId: int
          - targetIndex: double
          - section: TaskSection
        returns: Future<void>
      - name: moveToParent
        params:
          - taskId: int
          - parentId: int?
          - targetIndex: double
        returns: Future<void>
        notes: parentId null => promote to root; validates parent not completed/archived.
      - name: moveAcrossSections
        params:
          - taskId: int
          - section: TaskSection
          - sortIndex: double
          - dueDateLocal: DateTime
        returns: Future<void>
        notes: Wraps TaskRepository.moveTask, normalizes due date, triggers metrics if section changes.

  - name: FocusFlowService
    description: >
      Manages focus sessions end-to-end, including quick subtask creation, session
      tracking, and status synchronization with tasks.
    depends_on: [FocusSessionRepository, TaskRepository, TaskService, MetricRepository]
    responsibilities:
      - Ensure a task has at most one active session.
      - Start/stop sessions, persisting alarm preferences and estimates.
      - Create quick child tasks during sessions and transfer elapsed minutes.
      - Close sessions via end-session dialog choices (complete, add subtask, mark wasted).
    methods:
      - name: startFocus
        params:
          - taskId: int
          - estimateMinutes: int?
          - alarmEnabled: bool
        returns: Future<FocusSession>
      - name: pauseFocus
        params:
          - sessionId: int
        returns: Future<void>
        notes: Keeps session open but paused; UI-level timer handles state.
      - name: endFocus
        params:
          - sessionId: int
          - outcome: FocusOutcome
          - transferToTaskId: int?
          - reflectionNote: String?
        returns: Future<void>
        notes: >
          Updates Task status via TaskService, records wasted tag when needed,
          recomputes metrics. Supports outcome `complete_without_timer` for tutorial tasks.
      - name: quickSubtask
        params:
          - parentTaskId: int
          - title: String
        returns: Future<Task>
        notes: Creates child task, transfers elapsed time, ensures parent not completed.

  - name: MetricOrchestrator
    description: >
      Centralizes metric recomputation triggers and delivers cached snapshots
      to interested providers (home dashboard, reports).
    depends_on: [MetricRepository]
    responsibilities:
      - Debounce rapid recompute requests to avoid heavy writes.
      - Provide live stream of MetricSnapshot for homepage.
      - Offer manual invalidation hooks during maintenance.
    methods:
      - name: requestRecompute
        params:
          - reason: MetricRecomputeReason
        returns: Future<MetricSnapshot>
      - name: latest
        returns: Stream<MetricSnapshot?>
      - name: invalidate
        returns: Future<void>

  - name: PreferenceService
    description: >
      Wraps PreferenceRepository with domain semantics and validation (e.g.
      ensuring font scale stays within allowed presets).
    depends_on: [PreferenceRepository]
    responsibilities:
      - Load current device preferences for Riverpod providers.
      - Validate updates before persisting.
    methods:
      - name: watch
        returns: Stream<Preference>
      - name: update
        params:
          - payload: PreferenceUpdate
        returns: Future<void>

  - name: TaskTemplateService
    description: >
      Manages lifecycle of task templates and bridges template application with task creation.
    depends_on: [TaskTemplateRepository, TaskRepository, TaskService, MetricRepository]
    responsibilities:
      - Create/update/delete templates while ensuring parent tasks remain protected.
      - Provide suggestion lists for input auto-complete.
      - Apply templates to instantiate tasks and update lastUsed timestamps.
    methods:
      - name: createTemplate
        params:
          - draft: TaskTemplateDraft
        returns: Future<TaskTemplate>
      - name: updateTemplate
        params:
          - templateId: int
          - payload: TaskTemplateUpdate
        returns: Future<void>
      - name: deleteTemplate
        params:
          - templateId: int
        returns: Future<void>
      - name: suggestTemplates
        params:
          - query: String?
          - limit: int
        returns: Future<List<TaskTemplate>>
      - name: applyTemplate
        params:
          - templateId: int
          - overrides: TaskTemplateOverrides
        returns: Future<Task>
        notes: Creates task via TaskService, updates lastUsedAtUtc, triggers metrics.

  - name: SeedImportService
    description: >
      Coordinates first-run import of seed tags, tasks, templates, and inbox examples.
    depends_on: [SeedRepository, TaskRepository, TaskTemplateRepository, MetricRepository]
    responsibilities:
      - Check version log and apply seeds exactly once per version.
      - Initialize template locks for referenced parent tasks.
      - Trigger metric recompute after import completes.
      - Resolve slug references to actual task/template ids during import.
      - Select locale-specific seed bundle (`assets/seeds/<locale>/...`) based on device language, falling back to English.
    methods:
      - name: importIfNeeded
        params:
          - assetsBundle: AssetBundle
        returns: Future<void>
