meta:
  version: 1
  type: plan
  iteration: "251026-1"
  generated_at: "2025-10-26 06:00:00"
  based_on_preview: "251026-1-preview.yaml"

summary:
  objective: "基于preview文档的具体实施计划 - 为首页 GranoFlow 文字前插入 Logo"
  preview_reference: "documents/plan/251026-1-preview.yaml"

# 1. 实现规范YAML生成/修改计划
yaml_specification_updates:
  description: "根据preview文档生成或修改对应的实现规范YAML文件"
  
  updates:
    - file: "documents/architecture/widgets/main_drawer.yaml"
      action: "modify"
      based_on: "preview中的modified_files - MainDrawer文件"
      changes:
        - field: "widget_dependencies"
          value: "添加 AppLogo 组件依赖"
          source: "preview中MainDrawer的calls字段"
        - field: "widget_styling.headerStyle"
          value: "更新头部样式，包含 Logo 组件样式"
          source: "preview中MainDrawer的widget_styling部分"
        - field: "widget_interactions.logoDisplay"
          value: "Logo 显示交互"
          source: "preview中MainDrawer的widget_interactions部分"
    
    - file: "documents/architecture/widgets/app_logo.yaml"
      action: "modify"
      based_on: "preview中AppLogo组件的使用"
      changes:
        - field: "widget_categories.ui_component"
          value: "ui_component 分类，同时作为应用图标使用"
          source: "preview中architecture_updates部分"
        - field: "widget_dependencies"
          value: "MainDrawer 依赖，与应用图标保持一致"
          source: "preview中architecture_updates部分"

# 2. 验收测试用例计划
testing_plan:
  description: "详细的测试用例计划，区分现有测试修改和新测试创建"
  
  existing_tests:
    description: "需要修改的现有测试用例"
    tests:
      - file: "test/presentation/widgets/app_logo_test.dart"
        test_name: "AppLogo should apply different variants"
        modification_type: "modify"
        reason: "需要测试 onPrimary 变体在 MainDrawer 中的使用"
        current_expectation: "测试 primary 变体"
        new_expectation: "测试 onPrimary 变体在白色背景上的显示效果"
        implementation: |
          testWidgets('should apply onPrimary variant for MainDrawer', (tester) async {
            await tester.pumpWidget(buildTestWidget(variant: AppLogoVariant.onPrimary));
            final container = tester.widget<Container>(find.byType(Container));
            expect(container.decoration, isA<BoxDecoration>());
          });
  
  new_tests:
    description: "需要新建的测试用例"
    tests:
      - file: "test/presentation/widgets/main_drawer_test.dart"
        test_name: "MainDrawer Logo Integration Tests"
        test_type: "widget"
        description: "测试 MainDrawer 中 Logo 集成的功能"
        scenarios:
          - name: "should display AppLogo in header"
            description: "测试头部区域显示 AppLogo 组件"
            implementation: |
              testWidgets('should display AppLogo in header', (tester) async {
                await tester.pumpWidget(buildTestWidget());
                expect(find.byType(AppLogo), findsOneWidget);
                expect(find.text('GranoFlow'), findsOneWidget);
              });
          - name: "should have correct logo size"
            description: "测试 Logo 尺寸是否正确"
            implementation: |
              testWidgets('should have correct logo size', (tester) async {
                await tester.pumpWidget(buildTestWidget());
                final appLogo = tester.widget<AppLogo>(find.byType(AppLogo));
                expect(appLogo.size, equals(28.0));
                expect(appLogo.showText, isFalse);
                expect(appLogo.variant, equals(AppLogoVariant.onPrimary));
              });
          - name: "should maintain layout spacing"
            description: "测试布局间距是否正确"
            implementation: |
              testWidgets('should maintain layout spacing', (tester) async {
                await tester.pumpWidget(buildTestWidget());
                expect(find.byType(SizedBox), findsWidgets);
                // 验证 Logo 和文字之间的间距
              });
  
  configuration_tests:
    description: "配置相关测试，验证无硬编码"
    tests:
      - name: "logo_size_configuration"
        description: "验证 Logo 尺寸不是硬编码"
        implementation: |
          testWidgets('should use configurable logo size', (tester) async {
            // 测试不同尺寸下的 Logo 显示
            await tester.pumpWidget(buildTestWidget(logoSize: 24.0));
            expect(find.byType(AppLogo), findsOneWidget);
            
            await tester.pumpWidget(buildTestWidget(logoSize: 32.0));
            expect(find.byType(AppLogo), findsOneWidget);
          });
      - name: "logo_variant_configuration"
        description: "验证 Logo 变体不是硬编码"
        implementation: |
          testWidgets('should use configurable logo variant', (tester) async {
            // 测试不同变体下的 Logo 显示
            await tester.pumpWidget(buildTestWidget(variant: AppLogoVariant.onPrimary));
            expect(find.byType(AppLogo), findsOneWidget);
          });

# 3. 实现代码计划
implementation_plan:
  description: "具体的代码实现步骤"
  
  steps:
    - step: 1
      name: "修改 MainDrawer 组件"
      description: "在 MainDrawer 中集成 AppLogo 组件"
      files:
        - "lib/presentation/widgets/main_drawer.dart"
      changes:
        - type: "import"
          description: "添加 AppLogo 组件导入"
          implementation: |
            import '../widgets/app_logo.dart';
        - type: "widget_replacement"
          description: "替换 AppLogoIcon 为 AppLogo 组件"
          implementation: |
            const AppLogo(
              size: 28.0,
              showText: false,
              variant: AppLogoVariant.onPrimary,
            )
        - type: "spacing_adjustment"
          description: "调整 Logo 和文字之间的间距"
          implementation: |
            const SizedBox(width: 8)
      verification: "编译检查，确保无语法错误"
    
    - step: 2
      name: "更新依赖关系"
      description: "确保 AppLogo 组件正确导入"
      files:
        - "lib/presentation/widgets/main_drawer.dart"
      changes:
        - type: "dependency_check"
          description: "验证 AppLogo 组件依赖"
          implementation: "检查 import 语句"
      verification: "运行 flutter analyze 检查依赖"
    
    - step: 3
      name: "测试验证"
      description: "运行测试确保功能正常"
      files:
        - "test/presentation/widgets/main_drawer_test.dart"
        - "test/presentation/widgets/app_logo_test.dart"
      changes:
        - type: "test_execution"
          description: "执行相关测试"
          implementation: "flutter test"
      verification: "所有测试通过"

# 4. 执行状态跟踪
execution_tracking:
  description: "类似todolist的状态管理，记录每个环节的进展"
  
  overall_status: "pending"
  current_step: null
  completed_steps: []
  failed_steps: []
  
  steps:
    - id: "step_1"
      name: "修改 MainDrawer 组件"
      status: "pending"
      description: "在 MainDrawer 中集成 AppLogo 组件"
      dependencies: []
      estimated_time: "10分钟"
      verification_criteria: "编译检查通过，无语法错误"
    
    - id: "step_2"
      name: "更新依赖关系"
      status: "pending"
      description: "确保 AppLogo 组件正确导入"
      dependencies: ["step_1"]
      estimated_time: "5分钟"
      verification_criteria: "flutter analyze 通过"
    
    - id: "step_3"
      name: "测试验证"
      status: "pending"
      description: "运行测试确保功能正常"
      dependencies: ["step_1", "step_2"]
      estimated_time: "15分钟"
      verification_criteria: "所有测试通过"
    
    - id: "step_4"
      name: "YAML文档更新"
      status: "pending"
      description: "更新相关YAML文档"
      dependencies: ["step_1", "step_2", "step_3"]
      estimated_time: "10分钟"
      verification_criteria: "YAML文档与代码实现一致"
    
    - id: "step_5"
      name: "最终验证"
      status: "pending"
      description: "运行完整测试套件"
      dependencies: ["step_1", "step_2", "step_3", "step_4"]
      estimated_time: "10分钟"
      verification_criteria: "所有测试通过，功能完整"
  
  retry_mechanism:
    max_retries: 3
    retry_conditions:
      - "编译失败"
      - "测试失败"
      - "依赖问题"
  
  skip_conditions:
    - "技术不可行"
    - "依赖冲突"
    - "时间超限"

# 5. 成功标准
success_criteria:
  - "MainDrawer 中正确显示 AppLogo 组件"
  - "Logo 使用 onPrimary 变体，与文字颜色一致"
  - "Logo 尺寸为 28.0，与文字高度协调"
  - "Logo 和文字间距为 8px，布局美观"
  - "所有测试通过（单元测试、组件测试、集成测试）"
  - "通过 flutter analyze 检查"
  - "YAML文档与代码实现一致"
  - "功能完整实现，用户体验良好"
