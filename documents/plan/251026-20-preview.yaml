meta:
  version: 1
  type: preview
  iteration: "251026-20"
  generated_at: "2025-10-26 15:30:00"

summary:
  objective: "将inbox和tasks的滑动功能重构为可配置的通用组件，支持不同的滑动动作和提示"
  requirements: 
    - "需求1: 恢复Inbox页面滑动功能为'向右移动到今日任务，向左移动到回收站'"
    - "需求2: 在Tasks页面新增滑动功能'向右推迟，向左归档'"
    - "需求3: 创建通用滑动组件，支持配置驱动的不同滑动行为"
    - "需求4: 实现统一的滑动动作处理器，集中管理各种滑动逻辑"

# 组件设计状态说明
component_design_states:
  description: "滑动组件涉及多种状态和配置，需要支持不同页面的不同滑动行为"
  
  states:
    - name: "滑动配置状态"
      description: "存储不同页面的滑动配置信息"
      trigger: "组件初始化时"
      properties:
        - name: "leftAction"
          type: "SwipeActionType"
          description: "左滑动作类型"
        - name: "rightAction"
          type: "SwipeActionType"
          description: "右滑动作类型"
        - name: "leftHint"
          type: "String"
          description: "左滑提示文字"
        - name: "rightHint"
          type: "String"
          description: "右滑提示文字"
      use_case: "配置不同页面的滑动行为"
  
  state_transitions:
    description: "滑动动作的状态切换"
    transitions:
      - from: "待处理"
        to: "处理中"
        trigger: "用户滑动操作"
        condition: "滑动距离超过阈值"
      - from: "处理中"
        to: "完成"
        trigger: "动作执行成功"
        condition: "异步操作完成"

# 新建文件详细设计
new_files:
  # 滑动动作类型枚举
  - file: "lib/presentation/widgets/swipe_action_type.dart"
    type: "enum"
    class_name: "SwipeActionType"
    description: "定义所有支持的滑动动作类型"
    
    enums:
      - name: "SwipeActionType"
        values: ["quickPlan", "postpone", "archive", "delete"]
        description: "滑动动作类型枚举"
    
    dependencies:
      - "package:flutter/foundation.dart"
    
    called_by:
      - "lib/presentation/widgets/swipe_action_config.dart"
      - "lib/presentation/widgets/swipe_action_handler.dart"
    
    calls: []

  # 滑动配置类
  - file: "lib/presentation/widgets/swipe_action_config.dart"
    type: "static_class"
    class_name: "SwipeActionConfig"
    description: "滑动动作配置类，定义滑动行为的所有配置项"
    
    properties:
      - name: "leftAction"
        type: "SwipeActionType"
        description: "左滑动作类型"
        required: true
      - name: "rightAction"
        type: "SwipeActionType"
        description: "右滑动作类型"
        required: true
      - name: "leftHint"
        type: "String"
        description: "左滑提示文字"
        required: true
      - name: "rightHint"
        type: "String"
        description: "右滑提示文字"
        required: true
      - name: "leftIcon"
        type: "IconData"
        description: "左滑图标"
        required: true
      - name: "rightIcon"
        type: "IconData"
        description: "右滑图标"
        required: true
      - name: "leftColor"
        type: "Color"
        description: "左滑背景颜色"
        required: true
      - name: "rightColor"
        type: "Color"
        description: "右滑背景颜色"
        required: true
    
    dependencies:
      - "package:flutter/material.dart"
      - "lib/presentation/widgets/swipe_action_type.dart"
    
    called_by:
      - "lib/presentation/widgets/dismissible_task_tile.dart"
      - "lib/presentation/widgets/swipe_configs.dart"
    
    calls: []

  # 通用滑动组件
  - file: "lib/presentation/widgets/dismissible_task_tile.dart"
    type: "StatelessWidget"
    class_name: "DismissibleTaskTile"
    description: "通用的可滑动任务瓦片组件，支持配置驱动的滑动行为"
    
    properties:
      - name: "task"
        type: "Task"
        description: "任务对象"
        required: true
      - name: "config"
        type: "SwipeActionConfig"
        description: "滑动配置"
        required: true
      - name: "child"
        type: "Widget"
        description: "子组件内容"
        required: true
      - name: "onLeftAction"
        type: "Future<void> Function(Task)"
        description: "左滑动作回调"
        required: true
      - name: "onRightAction"
        type: "Future<void> Function(Task)"
        description: "右滑动作回调"
        required: true
    
    children:
      - name: "Dismissible"
        type: "Dismissible"
        properties:
          - name: "key"
            value: "ValueKey"
          - name: "background"
            value: "_DismissBackground"
          - name: "secondaryBackground"
            value: "_DismissBackground"
          - name: "confirmDismiss"
            value: "confirmDismiss"
        children:
          - name: "child"
            type: "Widget"
    
    methods:
      - name: "build"
        return_type: "Widget"
        description: "构建滑动组件"
        parameters: []
        implementation: |
          return Dismissible(
            key: ValueKey('${task.id}-${task.updatedAt.millisecondsSinceEpoch}'),
            background: _DismissBackground(
              alignment: Alignment.centerLeft,
              icon: config.leftIcon,
              label: config.leftHint,
              backgroundColor: config.leftColor,
              foregroundColor: Colors.white,
            ),
            secondaryBackground: _DismissBackground(
              alignment: Alignment.centerRight,
              icon: config.rightIcon,
              label: config.rightHint,
              backgroundColor: config.rightColor,
              foregroundColor: Colors.white,
            ),
            confirmDismiss: (direction) async {
              if (direction == DismissDirection.startToEnd) {
                await onLeftAction(task);
                return false;
              } else if (direction == DismissDirection.endToStart) {
                await onRightAction(task);
                return false;
              }
              return false;
            },
            child: child,
          );
    
    dependencies:
      - "package:flutter/material.dart"
      - "../../data/models/task.dart"
      - "swipe_action_config.dart"
    
    called_by:
      - "lib/presentation/inbox/inbox_page.dart"
      - "lib/presentation/tasks/task_list_page.dart"
    
    calls:
      - "lib/presentation/widgets/swipe_action_config.dart"

  # 统一动作处理器
  - file: "lib/presentation/widgets/swipe_action_handler.dart"
    type: "static_class"
    class_name: "SwipeActionHandler"
    description: "统一处理所有滑动动作的处理器类"
    
    methods:
      - name: "handleAction"
        return_type: "Future<void>"
        description: "处理滑动动作的统一入口"
        parameters:
          - name: "context"
            type: "BuildContext"
            required: true
          - name: "ref"
            type: "WidgetRef"
            required: true
          - name: "actionType"
            type: "SwipeActionType"
            required: true
          - name: "task"
            type: "Task"
            required: true
        implementation: |
          switch (actionType) {
            case SwipeActionType.quickPlan:
              await _handleQuickPlan(context, ref, task);
              break;
            case SwipeActionType.postpone:
              await _handlePostpone(context, ref, task);
              break;
            case SwipeActionType.archive:
              await _handleArchive(context, ref, task);
              break;
            case SwipeActionType.delete:
              await _handleDelete(context, ref, task);
              break;
          }
      
      - name: "_handleQuickPlan"
        return_type: "Future<void>"
        description: "处理快速规划动作"
        parameters:
          - name: "context"
            type: "BuildContext"
            required: true
          - name: "ref"
            type: "WidgetRef"
            required: true
          - name: "task"
            type: "Task"
            required: true
        implementation: |
          final taskService = ref.read(taskServiceProvider);
          final now = DateTime.now();
          final l10n = AppLocalizations.of(context);
          final messenger = ScaffoldMessenger.of(context);
          try {
            await taskService.planTask(taskId: task.id, dueDateLocal: now, section: TaskSection.today);
            if (!context.mounted) return;
            messenger.showSnackBar(SnackBar(content: Text(l10n.inboxQuickPlanSuccess)));
          } catch (error, stackTrace) {
            debugPrint('Failed to quick plan task: $error\n$stackTrace');
            if (!context.mounted) return;
            messenger.showSnackBar(SnackBar(content: Text('${l10n.inboxPlanError}: $error')));
          }
      
      - name: "_handlePostpone"
        return_type: "Future<void>"
        description: "处理智能推迟动作"
        parameters:
          - name: "context"
            type: "BuildContext"
            required: true
          - name: "ref"
            type: "WidgetRef"
            required: true
          - name: "task"
            type: "Task"
            required: true
        implementation: |
          final taskService = ref.read(taskServiceProvider);
          final l10n = AppLocalizations.of(context);
          final messenger = ScaffoldMessenger.of(context);
          try {
            final nextDate = _getNextScheduledDate(task.dueAt);
            final section = _sectionForDate(nextDate);
            await taskService.planTask(taskId: task.id, dueDateLocal: nextDate, section: section);
            if (!context.mounted) return;
            messenger.showSnackBar(SnackBar(content: Text(l10n.taskPostponeSuccess)));
          } catch (error, stackTrace) {
            debugPrint('Failed to postpone task: $error\n$stackTrace');
            if (!context.mounted) return;
            messenger.showSnackBar(SnackBar(content: Text('${l10n.taskPostponeError}: $error')));
          }
      
      - name: "_handleArchive"
        return_type: "Future<void>"
        description: "处理归档动作"
        parameters:
          - name: "context"
            type: "BuildContext"
            required: true
          - name: "ref"
            type: "WidgetRef"
            required: true
          - name: "task"
            type: "Task"
            required: true
        implementation: |
          final taskService = ref.read(taskServiceProvider);
          final l10n = AppLocalizations.of(context);
          final messenger = ScaffoldMessenger.of(context);
          try {
            await taskService.archiveTask(task.id);
            if (!context.mounted) return;
            messenger.showSnackBar(SnackBar(content: Text(l10n.taskArchivedSuccess)));
          } catch (error, stackTrace) {
            debugPrint('Failed to archive task: $error\n$stackTrace');
            if (!context.mounted) return;
            messenger.showSnackBar(SnackBar(content: Text('${l10n.taskArchiveError}: $error')));
          }
      
      - name: "_handleDelete"
        return_type: "Future<void>"
        description: "处理删除动作"
        parameters:
          - name: "context"
            type: "BuildContext"
            required: true
          - name: "ref"
            type: "WidgetRef"
            required: true
          - name: "task"
            type: "Task"
            required: true
        implementation: |
          final taskService = ref.read(taskServiceProvider);
          final l10n = AppLocalizations.of(context);
          final messenger = ScaffoldMessenger.of(context);
          final confirmed = await showDialog<bool>(
            context: context,
            builder: (context) => AlertDialog(
              title: Text(l10n.inboxDeleteConfirmTitle),
              content: Text(l10n.inboxDeleteConfirmMessage),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(false),
                  child: Text(l10n.commonCancel),
                ),
                FilledButton(
                  onPressed: () => Navigator.of(context).pop(true),
                  child: Text(l10n.commonDelete),
                ),
              ],
            ),
          );
          if (confirmed == true) {
            await taskService.softDelete(task.id);
            if (!context.mounted) return;
            messenger.showSnackBar(SnackBar(content: Text(l10n.inboxDeletedToast)));
          }
    
    dependencies:
      - "package:flutter/material.dart"
      - "package:flutter_riverpod/flutter_riverpod.dart"
      - "../../core/providers/service_providers.dart"
      - "../../data/models/task.dart"
      - "../../generated/l10n/app_localizations.dart"
      - "swipe_action_type.dart"
    
    called_by:
      - "lib/presentation/inbox/inbox_page.dart"
      - "lib/presentation/tasks/task_list_page.dart"
    
    calls:
      - "../../core/providers/service_providers.dart"
      - "../../data/models/task.dart"

  # 预设配置
  - file: "lib/presentation/widgets/swipe_configs.dart"
    type: "static_class"
    class_name: "SwipeConfigs"
    description: "提供不同页面的预设滑动配置"
    
    methods:
      - name: "inboxConfig"
        return_type: "SwipeActionConfig"
        description: "Inbox页面的滑动配置"
        parameters: []
        implementation: |
          return SwipeActionConfig(
            leftAction: SwipeActionType.delete,
            rightAction: SwipeActionType.quickPlan,
            leftHint: 'Delete',
            rightHint: 'Move to Today',
            leftIcon: Icons.delete_outline,
            rightIcon: Icons.calendar_today,
            leftColor: Colors.red,
            rightColor: Colors.green,
          );
      
      - name: "tasksConfig"
        return_type: "SwipeActionConfig"
        description: "Tasks页面的滑动配置"
        parameters: []
        implementation: |
          return SwipeActionConfig(
            leftAction: SwipeActionType.archive,
            rightAction: SwipeActionType.postpone,
            leftHint: 'Archive',
            rightHint: 'Postpone',
            leftIcon: Icons.archive,
            rightIcon: Icons.schedule,
            leftColor: Colors.blue,
            rightColor: Colors.orange,
          );
    
    dependencies:
      - "package:flutter/material.dart"
      - "swipe_action_config.dart"
      - "swipe_action_type.dart"
    
    called_by:
      - "lib/presentation/inbox/inbox_page.dart"
      - "lib/presentation/tasks/task_list_page.dart"
    
    calls:
      - "swipe_action_config.dart"
      - "swipe_action_type.dart"

# 修改文件详细差异
modified_files:
  # 本地化文件修改
  - file: "lib/l10n/app_en.arb"
    type: "localization"
    class_name: "AppLocalizations"
    description: "添加滑动功能相关的英文本地化字符串"
    
    implementation_changes:
      - field: "文件头部注释"
        current: "无注释"
        new: "添加字母升序排列规则注释"
        reason: "指导AI按字母顺序插入新的翻译键"
    
    properties_changes:
      - name: "taskArchivedSuccess"
        type: "String"
        description: "任务归档成功提示"
        required: true
        change_type: "新增"
        implementation: "Task archived successfully"
      
      - name: "taskArchiveError"
        type: "String"
        description: "任务归档失败提示"
        required: true
        change_type: "新增"
        implementation: "Failed to archive task"
      
      - name: "taskPostponeSuccess"
        type: "String"
        description: "任务推迟成功提示"
        required: true
        change_type: "新增"
        implementation: "Task postponed successfully"
      
      - name: "taskPostponeError"
        type: "String"
        description: "任务推迟失败提示"
        required: true
        change_type: "新增"
        implementation: "Failed to postpone task"
    
    called_by:
      - "lib/presentation/widgets/swipe_action_handler.dart"
    
    calls: []

  - file: "lib/l10n/app_zh_CN.arb"
    type: "localization"
    class_name: "AppLocalizations"
    description: "添加滑动功能相关的简体中文本地化字符串"
    
    implementation_changes:
      - field: "文件头部注释"
        current: "无注释"
        new: "添加字母升序排列规则注释"
        reason: "指导AI按字母顺序插入新的翻译键"
    
    properties_changes:
      - name: "taskArchivedSuccess"
        type: "String"
        description: "任务归档成功提示"
        required: true
        change_type: "新增"
        implementation: "任务归档成功"
      
      - name: "taskArchiveError"
        type: "String"
        description: "任务归档失败提示"
        required: true
        change_type: "新增"
        implementation: "归档任务失败"
      
      - name: "taskPostponeSuccess"
        type: "String"
        description: "任务推迟成功提示"
        required: true
        change_type: "新增"
        implementation: "任务推迟成功"
      
      - name: "taskPostponeError"
        type: "String"
        description: "任务推迟失败提示"
        required: true
        change_type: "新增"
        implementation: "推迟任务失败"
    
    called_by:
      - "lib/presentation/widgets/swipe_action_handler.dart"
    
    calls: []

  - file: "lib/l10n/app_zh_HK.arb"
    type: "localization"
    class_name: "AppLocalizations"
    description: "添加滑动功能相关的繁体中文（香港）本地化字符串"
    
    implementation_changes:
      - field: "文件头部注释"
        current: "无注释"
        new: "添加字母升序排列规则注释"
        reason: "指导AI按字母顺序插入新的翻译键"
    
    properties_changes:
      - name: "taskArchivedSuccess"
        type: "String"
        description: "任务归档成功提示"
        required: true
        change_type: "新增"
        implementation: "任務歸檔成功"
      
      - name: "taskArchiveError"
        type: "String"
        description: "任务归档失败提示"
        required: true
        change_type: "新增"
        implementation: "歸檔任務失敗"
      
      - name: "taskPostponeSuccess"
        type: "String"
        description: "任务推迟成功提示"
        required: true
        change_type: "新增"
        implementation: "任務推遲成功"
      
      - name: "taskPostponeError"
        type: "String"
        description: "任务推迟失败提示"
        required: true
        change_type: "新增"
        implementation: "推遲任務失敗"
    
    called_by:
      - "lib/presentation/widgets/swipe_action_handler.dart"
    
    calls: []

  - file: "lib/l10n/app_zh.arb"
    type: "localization"
    class_name: "AppLocalizations"
    description: "添加滑动功能相关的繁体中文（台湾）本地化字符串"
    
    implementation_changes:
      - field: "文件头部注释"
        current: "无注释"
        new: "添加字母升序排列规则注释"
        reason: "指导AI按字母顺序插入新的翻译键"
    
    properties_changes:
      - name: "taskArchivedSuccess"
        type: "String"
        description: "任务归档成功提示"
        required: true
        change_type: "新增"
        implementation: "任務歸檔成功"
      
      - name: "taskArchiveError"
        type: "String"
        description: "任务归档失败提示"
        required: true
        change_type: "新增"
        implementation: "歸檔任務失敗"
      
      - name: "taskPostponeSuccess"
        type: "String"
        description: "任务推迟成功提示"
        required: true
        change_type: "新增"
        implementation: "任務推遲成功"
      
      - name: "taskPostponeError"
        type: "String"
        description: "任务推迟失败提示"
        required: true
        change_type: "新增"
        implementation: "推遲任務失敗"
    
    called_by:
      - "lib/presentation/widgets/swipe_action_handler.dart"
    
    calls: []
  # Inbox页面修改
  - file: "lib/presentation/inbox/inbox_page.dart"
    type: "StatefulWidget"
    class_name: "InboxPage"
    description: "恢复Inbox页面的原始滑动功能，使用新的通用滑动组件"
    
    current_structure:
      - "使用Dismissible包装InboxTaskTile"
      - "左滑删除，右滑快速规划"
      - "硬编码的滑动逻辑和UI"
    
    new_structure:
      - "使用DismissibleTaskTile包装InboxTaskTile"
      - "通过SwipeConfigs.inboxConfig配置滑动行为"
      - "通过SwipeActionHandler处理滑动动作"
    
    properties_changes:
      - name: "滑动组件"
        type: "DismissibleTaskTile"
        description: "替换原有的Dismissible组件"
        required: true
        change_type: "修改"
        implementation: |
          DismissibleTaskTile(
            task: task,
            config: SwipeConfigs.inboxConfig,
            onLeftAction: (task) => SwipeActionHandler.handleAction(context, ref, SwipeActionType.delete, task),
            onRightAction: (task) => SwipeActionHandler.handleAction(context, ref, SwipeActionType.quickPlan, task),
            child: InboxTaskTileContent(task: task),
          )
    
    removed_properties:
      - name: "_quickPlan方法"
        type: "Future<void>"
        description: "快速规划方法"
        reason: "移动到SwipeActionHandler中统一管理"
      - name: "_smartPostpone方法"
        type: "Future<void>"
        description: "智能推迟方法"
        reason: "移动到SwipeActionHandler中统一管理"
      - name: "_getNextScheduledDate方法"
        type: "DateTime"
        description: "计算下一个推迟日期的方法"
        reason: "移动到SwipeActionHandler中统一管理"
    
    implementation_changes:
      - field: "滑动处理逻辑"
        current: "硬编码在InboxTaskTile中"
        new: "通过SwipeActionHandler统一处理"
        reason: "提高代码复用性和维护性"
    
    called_by:
      - "lib/presentation/main.dart"
    
    calls:
      - "lib/presentation/widgets/dismissible_task_tile.dart"
      - "lib/presentation/widgets/swipe_configs.dart"
      - "lib/presentation/widgets/swipe_action_handler.dart"

  # Tasks页面修改
  - file: "lib/presentation/tasks/task_list_page.dart"
    type: "StatefulWidget"
    class_name: "TaskListPage"
    description: "在Tasks页面添加滑动功能，使用新的通用滑动组件"
    
    current_structure:
      - "TaskLeafTile使用Card包装"
      - "无滑动功能"
      - "只有点击展开功能"
    
    new_structure:
      - "TaskLeafTile使用DismissibleTaskTile包装"
      - "通过SwipeConfigs.tasksConfig配置滑动行为"
      - "通过SwipeActionHandler处理滑动动作"
    
    properties_changes:
      - name: "滑动组件"
        type: "DismissibleTaskTile"
        description: "为TaskLeafTile添加滑动功能"
        required: true
        change_type: "新增"
        implementation: |
          DismissibleTaskTile(
            task: widget.task,
            config: SwipeConfigs.tasksConfig,
            onLeftAction: (task) => SwipeActionHandler.handleAction(context, ref, SwipeActionType.archive, task),
            onRightAction: (task) => SwipeActionHandler.handleAction(context, ref, SwipeActionType.postpone, task),
            child: Card(
              margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              child: TaskLeafTileContent(task: widget.task),
            ),
          )
    
    implementation_changes:
      - field: "任务瓦片包装"
        current: "Card直接包装TaskLeafTile"
        new: "DismissibleTaskTile包装Card和TaskLeafTile"
        reason: "添加滑动功能支持"
    
    called_by:
      - "lib/presentation/main.dart"
    
    calls:
      - "lib/presentation/widgets/dismissible_task_tile.dart"
      - "lib/presentation/widgets/swipe_configs.dart"
      - "lib/presentation/widgets/swipe_action_handler.dart"

# 架构文档更新
architecture_updates:
  - file: "documents/architecture/widgets.yaml"
    changes:
      - field: "滑动组件"
        current_value: "无通用滑动组件"
        new_value: "DismissibleTaskTile通用滑动组件"
        purpose: "添加可配置的通用滑动组件"
        reason: "支持不同页面的不同滑动行为"
  
  - file: "documents/architecture/pages.yaml"
    changes:
      - field: "Inbox页面滑动功能"
        current_value: "硬编码的滑动逻辑"
        new_value: "配置驱动的滑动行为"
        purpose: "提高代码复用性"
        reason: "使用通用滑动组件"
      
      - field: "Tasks页面滑动功能"
        current_value: "无滑动功能"
        new_value: "新增滑动功能"
        purpose: "提供任务管理功能"
        reason: "支持归档和推迟操作"

# 测试策略
testing_strategy:
  unit_tests:
    description: "测试滑动动作处理器的各种动作类型"
    coverage_target: "≥80%"
    test_files:
      - "test/presentation/widgets/swipe_action_handler_test.dart"
      - "test/presentation/widgets/swipe_configs_test.dart"
  
  widget_tests:
    description: "测试通用滑动组件的UI和交互"
    test_files:
      - "test/presentation/widgets/dismissible_task_tile_test.dart"
  
  integration_tests:
    description: "测试Inbox和Tasks页面的滑动功能集成"
    test_files:
      - "test/integration/inbox_swipe_test.dart"
      - "test/integration/tasks_swipe_test.dart"
  
  localization_tests:
    description: "测试本地化字符串的正确性"
    test_files:
      - "test/l10n/swipe_action_localization_test.dart"
    test_cases:
      - "验证所有语言的滑动提示文字存在"
      - "验证本地化字符串格式正确"
      - "验证无硬编码的提示文字"

# 成功标准
success_criteria:
  - "所有测试通过（单元测试、组件测试、集成测试、本地化测试）"
  - "代码覆盖率 ≥80%"
  - "Inbox页面滑动功能恢复为'向右移动到今日任务，向左移动到回收站'"
  - "Tasks页面新增滑动功能'向右推迟，向左归档'"
  - "通用滑动组件支持配置驱动的不同行为"
  - "滑动动作处理器统一管理所有滑动逻辑"
  - "所有提示文字正确本地化（英文、简体中文、繁体中文）"
  - "无硬编码的提示文字，所有文字都从arb文件读取"
  - "通过 flutter analyze 检查"
  - "符合 Flutter 最佳实践"