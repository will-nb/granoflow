title: "TaskId生成规则优化 - 执行计划"
date: "2025-10-26"
version: "1.0"

overview:
  description: "实现基于日期的自增taskId生成规则，格式为YYYYMMDD-XXXX，每天从0001开始自增"
  based_on: "documents/plan/251026-15-preview.yaml"

phases:
  phase_1:
    title: "实现新的ID生成逻辑"
    description: "重写_generateTaskId方法，实现基于日期的自增逻辑"
    tasks:
      - id: "implement_get_latest_task"
        description: "实现_getLatestTask方法，查询最新创建的任务"
        files: ["lib/data/repositories/task_repository.dart"]
        changes:
          - "添加_getLatestTask方法"
          - "使用Isar查询按createdAt降序排列的最新任务"
          - "添加错误处理和日志记录"
        expected_result: "能够查询到数据库中最新创建的任务"
      
      - id: "implement_parse_task_id"
        description: "实现_parseTaskId方法，解析taskId格式"
        files: ["lib/data/repositories/task_repository.dart"]
        changes:
          - "添加_parseTaskId方法"
          - "解析YYYYMMDD-XXXX格式"
          - "验证日期和后缀部分"
          - "添加格式验证和错误处理"
        expected_result: "能够正确解析taskId并提取日期和后缀"
      
      - id: "rewrite_generate_task_id"
        description: "重写_generateTaskId方法，实现新的生成逻辑"
        files: ["lib/data/repositories/task_repository.dart"]
        changes:
          - "重写_generateTaskId方法"
          - "集成_getLatestTask和_parseTaskId"
          - "实现日期比较和自增逻辑"
          - "添加完善的错误处理机制"
        expected_result: "新任务使用YYYYMMDD-XXXX格式，每天从0001开始自增"
    
  phase_2:
    title: "测试和验证"
    description: "测试各种边界情况和异常处理"
    tasks:
      - id: "test_empty_database"
        description: "测试空数据库情况"
        files: ["test/data/repositories/task_repository_test.dart"]
        changes:
          - "添加空数据库测试用例"
          - "验证返回0001格式"
        expected_result: "空数据库时正确返回YYYYMMDD-0001"
      
      - id: "test_format_mismatch"
        description: "测试格式不匹配情况"
        files: ["test/data/repositories/task_repository_test.dart"]
        changes:
          - "添加格式不匹配测试用例"
          - "测试各种异常格式"
        expected_result: "格式不匹配时正确fallback到0001"
      
      - id: "test_cross_day_reset"
        description: "测试跨天重置功能"
        files: ["test/data/repositories/task_repository_test.dart"]
        changes:
          - "添加跨天重置测试用例"
          - "模拟不同日期的任务创建"
        expected_result: "跨天时正确重置为0001"
      
      - id: "test_concurrent_creation"
        description: "测试并发创建任务"
        files: ["test/data/repositories/task_repository_test.dart"]
        changes:
          - "添加并发创建测试用例"
          - "验证ID唯一性"
        expected_result: "并发创建时ID不冲突"

implementation_details:
  new_methods:
    get_latest_task: |
      Future<Task?> _getLatestTask() async {
        try {
          final tasks = await _isar.taskEntitys
            .where()
            .sortByCreatedAtDesc()
            .limit(1)
            .findAll();
          
          return tasks.isNotEmpty ? _toDomain(tasks.first) : null;
        } catch (e) {
          debugPrint('Error querying latest task: $e');
          return null;
        }
      }
    
    parse_task_id: |
      Map<String, dynamic>? _parseTaskId(String taskId) {
        try {
          if (taskId.isEmpty) return null;
          
          final parts = taskId.split('-');
          if (parts.length != 2) return null;
          
          final datePart = parts[0];
          final suffixPart = parts[1];
          
          if (datePart.length != 8) return null;
          
          final suffixInt = int.tryParse(suffixPart);
          if (suffixInt == null) return null;
          
          return {
            'date': datePart,
            'suffix': suffixInt,
          };
        } catch (e) {
          debugPrint('Error parsing taskId: $e');
          return null;
        }
      }
    
    generate_task_id: |
      String _generateTaskId(DateTime now) {
        final dateString = '${now.year}${now.month.toString().padLeft(2, '0')}${now.day.toString().padLeft(2, '0')}';
        
        try {
          final latestTask = await _getLatestTask();
          
          if (latestTask == null) {
            return '$dateString-0001';
          }
          
          final parsed = _parseTaskId(latestTask.taskId);
          if (parsed == null) {
            return '$dateString-0001';
          }
          
          final latestDate = parsed['date'] as String;
          final latestSuffix = parsed['suffix'] as int;
          
          if (latestDate == dateString) {
            // 如果是今天，后缀+1
            final nextSuffix = (latestSuffix + 1).toString().padLeft(4, '0');
            return '$dateString-$nextSuffix';
          } else {
            // 如果不是今天，从0001开始
            return '$dateString-0001';
          }
        } catch (e) {
          debugPrint('Error generating taskId: $e');
          return '$dateString-0001';
        }
      }

testing_plan:
  unit_tests:
    - "测试_getLatestTask方法"
    - "测试_parseTaskId方法"
    - "测试_generateTaskId方法"
    - "测试各种边界情况"
    - "测试异常处理机制"
  
  integration_tests:
    - "测试完整任务创建流程"
    - "测试跨天任务创建"
    - "测试并发任务创建"
    - "测试数据库异常情况"
  
  manual_tests:
    - "创建第一个任务，验证ID格式"
    - "创建多个任务，验证自增逻辑"
    - "跨天创建任务，验证重置功能"
    - "测试各种异常情况"

rollback_plan:
  description: "如果出现问题，可以快速回滚到当前实现"
  steps:
    - "恢复原来的_generateTaskId方法"
    - "删除新增的_getLatestTask和_parseTaskId方法"
    - "清理相关测试代码"
    - "验证系统正常运行"

success_criteria:
  functional:
    - "新任务使用YYYYMMDD-XXXX格式"
    - "每天从0001开始自增"
    - "跨天自动重置计数器"
    - "处理空数据库情况"
    - "处理格式不匹配情况"
    - "处理数据损坏情况"
    - "处理解析异常情况"
  
  performance:
    - "ID生成速度 < 100ms"
    - "数据库查询优化"
    - "错误处理不影响性能"
  
  compatibility:
    - "现有数据不受影响"
    - "新老格式共存"
    - "数据迁移无风险"

notes:
  - "保持现有代码结构不变"
  - "确保向后兼容性"
  - "添加完善的错误处理"
  - "优化数据库查询性能"
  - "保持代码简洁易读"
