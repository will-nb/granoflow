meta:
  id: "251025-3"
  title: "统一顶部导航栏组件"
  description: "创建可复用的顶部导航栏组件，替代各页面硬编码的AppBar"
  author: "Assistant"
  created_at: "2025-01-25"
  type: "preview"

summary:
  objective: "创建统一的顶部导航栏组件，提供主菜单按钮和动态标题，替代各页面重复的AppBar实现"
  requirements:
    - "创建可复用的PageAppBar组件"
    - "左侧主菜单按钮，点击打开侧边栏"
    - "动态标题，根据页面定义"
    - "右侧可选操作按钮"
    - "替换现有页面的硬编码AppBar"
    - "保持现有功能不变"

component_design:
  name: "PageAppBar"
  type: "StatelessWidget implements PreferredSizeWidget"
  location: "lib/presentation/widgets/page_app_bar.dart"
  
  properties:
    title:
      type: "String"
      description: "导航栏标题，由调用页面传入"
      required: true
    actions:
      type: "List<Widget>?"
      description: "右侧操作按钮列表，可选"
      required: false
    showMenuButton:
      type: "bool"
      description: "是否显示左侧主菜单按钮"
      default: true
    automaticallyImplyLeading:
      type: "bool"
      description: "是否自动显示返回按钮"
      default: false

  structure:
    - name: "AppBar"
      type: "Material AppBar"
      properties:
        title: "Text(widget.title)"
        leading: "条件渲染：菜单按钮或返回按钮"
        actions: "widget.actions ?? []"
        backgroundColor: "Theme.of(context).colorScheme.surface"
        foregroundColor: "Theme.of(context).colorScheme.onSurface"
        elevation: "1"
        centerTitle: "true"

    - name: "MenuButton"
      type: "IconButton"
      condition: "showMenuButton && !automaticallyImplyLeading"
      properties:
        icon: "Icons.menu"
        onPressed: "Scaffold.of(context).openDrawer()"
        tooltip: "打开主菜单"

    - name: "BackButton"
      type: "自动生成"
      condition: "automaticallyImplyLeading"
      properties:
        onPressed: "Navigator.of(context).pop()"

  features:
    - "响应式设计：适配不同屏幕尺寸"
    - "主题一致性：使用应用主题色"
    - "无障碍支持：提供语义化标签"
    - "灵活配置：支持自定义操作按钮"
    - "状态管理：与侧边栏状态同步"

modified_files:
  lib/presentation/widgets/page_app_bar.dart:
    description: "新建统一顶部导航栏组件"
    new_structure: |
      class PageAppBar extends StatelessWidget implements PreferredSizeWidget {
        const PageAppBar({
          super.key,
          required this.title,
          this.actions,
          this.showMenuButton = true,
          this.automaticallyImplyLeading = false,
        });

        final String title;
        final List<Widget>? actions;
        final bool showMenuButton;
        final bool automaticallyImplyLeading;

        @override
        Widget build(BuildContext context) {
          return AppBar(
            title: Text(title),
            leading: _buildLeading(context),
            actions: actions ?? [],
            backgroundColor: Theme.of(context).colorScheme.surface,
            foregroundColor: Theme.of(context).colorScheme.onSurface,
            elevation: 1,
            centerTitle: true,
          );
        }

        Widget? _buildLeading(BuildContext context) {
          if (automaticallyImplyLeading) {
            return null; // 让AppBar自动处理返回按钮
          }
          if (showMenuButton) {
            return Builder(
              builder: (context) => IconButton(
                icon: const Icon(Icons.menu),
                onPressed: () => Scaffold.of(context).openDrawer(),
                tooltip: '打开主菜单',
              ),
            );
          }
          return null;
        }

        @override
        Size get preferredSize => const Size.fromHeight(kToolbarHeight);
      }

  lib/presentation/home/home_page.dart:
    description: "首页使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
      - "传入页面标题"
    implementation: |
      // 替换现有的AppBar
      appBar: const PageAppBar(
        title: 'Home',
        actions: [
          // 可以添加首页特有的操作按钮
        ],
      ),

  lib/presentation/achievements/achievements_page.dart:
    description: "成就页面使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
    implementation: |
      appBar: const PageAppBar(
        title: 'Achievements',
      ),

  lib/presentation/tasks/task_list_page.dart:
    description: "任务列表页面使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
      - "保持现有功能不变"
    implementation: |
      appBar: const PageAppBar(
        title: 'Tasks',
        actions: [
          // 保持现有的操作按钮
        ],
      ),

  lib/presentation/completion_management/trash_page.dart:
    description: "垃圾箱页面使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
    implementation: |
      appBar: const PageAppBar(
        title: 'Trash',
      ),

  lib/presentation/completion_management/completed_page.dart:
    description: "已完成页面使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
    implementation: |
      appBar: const PageAppBar(
        title: 'Completed',
      ),

  lib/presentation/inbox/inbox_page.dart:
    description: "收集箱页面使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
    implementation: |
      appBar: const PageAppBar(
        title: 'Inbox',
      ),

  lib/presentation/timer/timer_page.dart:
    description: "计时器页面使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
    implementation: |
      appBar: const PageAppBar(
        title: 'Timer',
      ),

  lib/presentation/navigation/settings_controls.dart:
    description: "设置页面使用统一导航栏"
    changes:
      - "移除硬编码的AppBar"
      - "使用PageAppBar组件"
    implementation: |
      appBar: const PageAppBar(
        title: 'Settings',
      ),

architecture_updates:
  responsive_navigation:
    description: "ResponsiveNavigation组件需要更新"
    changes:
      - "移除ResponsiveNavigation中的AppBar逻辑"
      - "让各页面自己管理AppBar"
      - "保持侧边栏功能不变"
    implementation: |
      // 在ResponsiveNavigation中移除AppBar相关代码
      // 让各页面通过PageAppBar自己管理顶部导航栏

  drawer_integration:
    description: "侧边栏集成"
    changes:
      - "PageAppBar的菜单按钮与ResponsiveNavigation的侧边栏集成"
      - "保持现有的侧边栏功能"
      - "确保菜单按钮能正确打开侧边栏"

testing_strategy:
  unit_tests:
    - "test_page_app_bar_creation"
    - "test_page_app_bar_title_display"
    - "test_page_app_bar_menu_button"
    - "test_page_app_bar_actions"
    - "test_page_app_bar_theme_consistency"

  widget_tests:
    - "test_page_app_bar_rendering"
    - "test_page_app_bar_interactions"
    - "test_page_app_bar_responsive_behavior"

  integration_tests:
    - "test_page_app_bar_with_drawer"
    - "test_page_app_bar_navigation"
    - "test_page_app_bar_theme_switching"

success_criteria:
  functionality:
    - "所有页面都能正确显示统一导航栏"
    - "左侧菜单按钮能正确打开侧边栏"
    - "标题能根据页面动态显示"
    - "右侧操作按钮功能正常"
    - "主题样式保持一致"

  code_quality:
    - "消除重复的AppBar代码"
    - "提高代码复用性"
    - "保持代码结构清晰"
    - "遵循Flutter最佳实践"

  user_experience:
    - "导航体验一致"
    - "视觉风格统一"
    - "交互逻辑清晰"
    - "响应式设计良好"

implementation_phases:
  phase_1:
    name: "创建PageAppBar组件"
    tasks:
      - "创建PageAppBar组件文件"
      - "实现基本结构和属性"
      - "添加主题支持"
      - "编写单元测试"

  phase_2:
    name: "替换现有页面"
    tasks:
      - "替换HomePage的AppBar"
      - "替换AchievementsPage的AppBar"
      - "替换TaskListPage的AppBar"
      - "替换其他页面的AppBar"

  phase_3:
    name: "集成和测试"
    tasks:
      - "测试侧边栏集成"
      - "测试主题切换"
      - "测试响应式行为"
      - "修复发现的问题"

  phase_4:
    name: "优化和文档"
    tasks:
      - "性能优化"
      - "代码审查"
      - "更新文档"
      - "最终测试"

benefits:
  code_reduction:
    - "消除重复的AppBar代码"
    - "减少维护成本"
    - "提高代码复用性"

  consistency:
    - "统一的视觉风格"
    - "一致的用户体验"
    - "标准化的交互模式"

  maintainability:
    - "集中管理导航栏逻辑"
    - "易于添加新功能"
    - "便于主题更新"

  flexibility:
    - "支持页面自定义"
    - "可选的菜单按钮"
    - "灵活的操作按钮配置"
