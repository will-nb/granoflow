title: "自定义日期选择器优化 - 执行计划"
date: "2025-10-26"
version: "1.0"

overview:
  description: "实现增强版日期选择器，提供快速选择按钮 + 自定义日期选择，限制只能选择今天及以后的日期"
  based_on: "documents/plan/251026-14-preview.yaml"

phases:
  phase_1:
    title: "添加本地化文案"
    description: "为快速选择对话框添加多语言支持"
    tasks:
      - id: "add_date_picker_localization"
        description: "添加日期选择器相关的本地化文案"
        files: ["lib/l10n/app_zh_CN.arb", "lib/l10n/app_zh_HK.arb", "lib/l10n/app_en.arb"]
        changes:
          - "添加datePickerTitle、datePickerToday、datePickerTomorrow等文案"
          - "确保三种语言的一致性"
        expected_result: "所有语言都有完整的日期选择器文案"
    
  phase_2:
    title: "实现日期计算逻辑"
    description: "添加计算特殊日期的辅助方法"
    tasks:
      - id: "implement_date_calculation_methods"
        description: "实现_getThisWeekSaturday和_getEndOfMonth方法"
        files: ["lib/presentation/inbox/inbox_page.dart"]
        changes:
          - "添加_getThisWeekSaturday方法计算本周六"
          - "添加_getEndOfMonth方法计算本月最后一天"
          - "添加日期计算的边界情况处理"
        expected_result: "日期计算逻辑正确，处理各种边界情况"
    
  phase_3:
    title: "创建快速选择对话框"
    description: "实现_QuickDatePicker组件"
    tasks:
      - id: "create_quick_date_picker"
        description: "创建_QuickDatePicker对话框组件"
        files: ["lib/presentation/inbox/inbox_page.dart"]
        changes:
          - "创建_QuickDatePicker类"
          - "实现4个快速选择按钮的UI"
          - "添加'选择其他日期'选项"
          - "处理用户选择逻辑和返回结果"
        expected_result: "快速选择对话框UI完整，交互正常"
    
  phase_4:
    title: "集成到现有流程"
    description: "修改_planTask方法集成新的选择器"
    tasks:
      - id: "integrate_quick_picker"
        description: "修改_planTask方法调用快速选择器"
        files: ["lib/presentation/inbox/inbox_page.dart"]
        changes:
          - "修改_planTask方法先显示快速选择器"
          - "添加标准DatePicker作为备选方案"
          - "确保日期选择逻辑正确"
          - "保持现有的任务计划逻辑"
        expected_result: "完整的日期选择流程正常工作"

implementation_details:
  new_localization_keys:
    simplified_chinese:
      - "datePickerTitle": "选择截止日期"
      - "datePickerToday": "今天"
      - "datePickerTomorrow": "明天"
      - "datePickerThisWeek": "本周"
      - "datePickerThisMonth": "当月"
      - "datePickerCustom": "选择其他日期"
    
    traditional_chinese_hk:
      - "datePickerTitle": "選擇截止日期"
      - "datePickerToday": "今天"
      - "datePickerTomorrow": "明天"
      - "datePickerThisWeek": "本週"
      - "datePickerThisMonth": "當月"
      - "datePickerCustom": "選擇其他日期"
    
    english:
      - "datePickerTitle": "Select Due Date"
      - "datePickerToday": "Today"
      - "datePickerTomorrow": "Tomorrow"
      - "datePickerThisWeek": "This Week"
      - "datePickerThisMonth": "This Month"
      - "datePickerCustom": "Pick Custom Date"
  
  date_calculation_methods:
    get_this_week_saturday: |
      DateTime _getThisWeekSaturday(DateTime now) {
        final daysUntilSaturday = (DateTime.saturday - now.weekday) % 7;
        return now.add(Duration(days: daysUntilSaturday == 0 ? 7 : daysUntilSaturday));
      }
    
    get_end_of_month: |
      DateTime _getEndOfMonth(DateTime now) {
        return DateTime(now.year, now.month + 1, 0);
      }
  
  quick_picker_widget: |
    class _QuickDatePicker extends StatelessWidget {
      const _QuickDatePicker({
        required this.today,
        required this.tomorrow,
        required this.thisWeek,
        required this.thisMonth,
      });
      
      final DateTime today;
      final DateTime tomorrow;
      final DateTime thisWeek;
      final DateTime thisMonth;
      
      @override
      Widget build(BuildContext context) {
        final l10n = AppLocalizations.of(context);
        return SafeArea(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                title: Text(l10n.datePickerTitle),
                trailing: IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ),
              const Divider(),
              ListTile(
                leading: const Icon(Icons.calendar_today),
                title: Text(l10n.datePickerToday),
                onTap: () => Navigator.of(context).pop(today),
              ),
              ListTile(
                leading: const Icon(Icons.calendar_today),
                title: Text(l10n.datePickerTomorrow),
                onTap: () => Navigator.of(context).pop(tomorrow),
              ),
              ListTile(
                leading: const Icon(Icons.calendar_today),
                title: Text(l10n.datePickerThisWeek),
                onTap: () => Navigator.of(context).pop(thisWeek),
              ),
              ListTile(
                leading: const Icon(Icons.calendar_today),
                title: Text(l10n.datePickerThisMonth),
                onTap: () => Navigator.of(context).pop(thisMonth),
              ),
              const Divider(),
              ListTile(
                leading: const Icon(Icons.calendar_month),
                title: Text(l10n.datePickerCustom),
                onTap: () => Navigator.of(context).pop(null),
              ),
            ],
          ),
        );
      }
    }
  
  modified_plan_task_method: |
    Future<void> _planTask(BuildContext context, Task task) async {
      final l10n = AppLocalizations.of(context);
      final now = DateTime.now();
      
      // 计算特殊日期
      final today = now;
      final tomorrow = now.add(const Duration(days: 1));
      final thisWeek = _getThisWeekSaturday(now);
      final thisMonth = _getEndOfMonth(now);
      
      // 显示快速选择对话框
      final quickChoice = await showModalBottomSheet<DateTime>(
        context: context,
        builder: (context) => _QuickDatePicker(
          today: today,
          tomorrow: tomorrow,
          thisWeek: thisWeek,
          thisMonth: thisMonth,
        ),
      );
      
      DateTime? selectedDate = quickChoice;
      
      // 如果没有选择快速选项，显示标准日期选择器
      if (selectedDate == null) {
        selectedDate = await showDatePicker(
          context: context,
          initialDate: now,
          firstDate: now, // 今天以前不可选择
          lastDate: now.add(const Duration(days: 365)),
        );
      }
      
      if (selectedDate == null) {
        return;
      }
      
      setState(() {
        _isPlanning = true;
      });
      
      try {
        final section = _sectionForDate(selectedDate);
        await ref
            .read(taskServiceProvider)
            .planTask(taskId: task.id, dueDateLocal: selectedDate, section: section);
        if (!context.mounted) {
          return;
        }
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(l10n.inboxPlanSuccess)));
      } catch (error, stackTrace) {
        debugPrint('Failed to plan inbox task: $error\n$stackTrace');
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('${l10n.inboxPlanError}: $error')));
        }
      } finally {
        if (mounted) {
          setState(() {
            _isPlanning = false;
          });
        }
      }
    }

testing_plan:
  manual_tests:
    - "点击'截止日期'按钮，确认快速选择对话框正常显示"
    - "选择'今天'，确认任务移动到今日任务"
    - "选择'明天'，确认任务移动到明日任务"
    - "选择'本周'，确认任务移动到本周任务"
    - "选择'当月'，确认任务移动到当月任务"
    - "选择'选择其他日期'，确认标准DatePicker正常打开"
    - "在标准DatePicker中选择过去日期，确认无法选择"
    - "在标准DatePicker中选择未来日期，确认任务正确移动"
    - "测试三种语言的文案显示"
  
  edge_cases:
    - "今天是周六时，'本周'选项的行为"
    - "月末最后一天时，'当月'选项的行为"
    - "跨年时的日期计算"
    - "快速连续点击按钮"
    - "取消选择的情况"

rollback_plan:
  description: "如果出现问题，可以快速回滚到当前实现"
  steps:
    - "恢复原来的_planTask方法"
    - "移除新增的本地化文案"
    - "删除_QuickDatePicker组件"
    - "删除日期计算方法"

success_criteria:
  functional:
    - "快速选择对话框包含4个常用日期选项"
    - "点击快速选项直接设置对应日期"
    - "点击'选择其他日期'打开标准DatePicker"
    - "标准DatePicker只能选择今天及以后的日期"
    - "选择日期后任务正确移动到任务栏"
  
  visual:
    - "快速选择对话框布局清晰"
    - "按钮样式与整体设计一致"
    - "文字描述准确且易懂"
    - "交互反馈及时"
  
  localization:
    - "简体中文显示'今天'、'明天'、'本周'、'当月'"
    - "繁体中文(香港)显示'今天'、'明天'、'本週'、'當月'"
    - "英文显示'Today'、'Tomorrow'、'This Week'、'This Month'"
    - "所有文案简洁明了"

notes:
  - "保持现有的任务计划逻辑不变"
  - "确保日期计算的准确性"
  - "保持与整体设计风格的一致性"
  - "优化用户体验和操作效率"
