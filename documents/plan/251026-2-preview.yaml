meta:
  version: 1
  type: preview
  iteration: "251026-2"
  generated_at: "2025-10-26 05:45:00"

summary:
  objective: "更新 macOS 应用图标，使用我们的自定义 Logo 替换 Flutter 默认图标"
  requirements: 
    - "需求1: 使用 assets/logo/ 下的自定义 Logo 资源"
    - "需求2: 生成所有必需的 macOS 图标尺寸（16x16 到 1024x1024）"
    - "需求3: 确保图标在不同尺寸下都清晰可见"
    - "需求4: 保持品牌一致性和视觉识别度"

# 组件设计状态说明
component_design_states:
  description: "macOS 应用图标的状态设计，包含不同尺寸和分辨率的图标"
  
  states:
    - name: "iconGeneration"
      description: "图标生成状态"
      trigger: "构建 macOS 应用时"
      properties:
        - name: "sourceImage"
          type: "String"
          description: "源图片路径"
        - name: "targetSizes"
          type: "List<int>"
          description: "目标尺寸列表"
        - name: "iconFormat"
          type: "String"
          description: "图标格式"
      use_case: "为 macOS 应用生成各种尺寸的图标"
  
  state_transitions:
    description: "图标生成状态切换逻辑"
    transitions:
      - from: "source"
        to: "generated"
        trigger: "图标生成完成"
        condition: "所有尺寸的图标都成功生成"

# 修改文件详细差异
modified_files:
  # macOS 图标文件
  - file: "macos/Runner/Assets.xcassets/AppIcon.appiconset/"
    type: "asset_catalog"
    class_name: "AppIcon"
    description: "macOS 应用图标资源目录"
    
    # 当前结构
    current_structure:
      - "包含 Contents.json 配置文件"
      - "包含各种尺寸的 PNG 图标文件"
      - "使用 Flutter 默认图标或旧的自定义图标"
    
    # 新结构
    new_structure:
      - "包含 Contents.json 配置文件"
      - "包含基于自定义 Logo 生成的各种尺寸图标"
      - "使用我们的 GranoFlow Logo 作为应用图标"
    
    # 属性变更
    properties_changes:
      - name: "app_icon_16.png"
        type: "PNG"
        description: "16x16 应用图标"
        required: true
        change_type: "替换"
        implementation: "基于 granostack-logo.svg 生成 16x16 图标"
      - name: "app_icon_32.png"
        type: "PNG"
        description: "32x32 应用图标"
        required: true
        change_type: "替换"
        implementation: "基于 granostack-logo.svg 生成 32x32 图标"
      - name: "app_icon_64.png"
        type: "PNG"
        description: "64x64 应用图标"
        required: true
        change_type: "替换"
        implementation: "基于 granostack-logo.svg 生成 64x64 图标"
      - name: "app_icon_128.png"
        type: "PNG"
        description: "128x128 应用图标"
        required: true
        change_type: "替换"
        implementation: "基于 granostack-logo.svg 生成 128x128 图标"
      - name: "app_icon_256.png"
        type: "PNG"
        description: "256x256 应用图标"
        required: true
        change_type: "替换"
        implementation: "基于 granostack-logo.svg 生成 256x256 图标"
      - name: "app_icon_512.png"
        type: "PNG"
        description: "512x512 应用图标"
        required: true
        change_type: "替换"
        implementation: "基于 granostack-logo.svg 生成 512x512 图标"
      - name: "app_icon_1024.png"
        type: "PNG"
        description: "1024x1024 应用图标"
        required: true
        change_type: "替换"
        implementation: "基于 granostack-logo.svg 生成 1024x1024 图标"
    
    # 实现变更
    implementation_changes:
      - field: "图标源文件"
        current: "Flutter 默认图标或旧的自定义图标"
        new: "使用 assets/logo/granostack-logo.svg 作为源文件"
        reason: "使用我们的自定义 Logo 确保品牌一致性"
      - field: "图标生成方式"
        current: "手动生成或使用默认图标"
        new: "基于 SVG 源文件自动生成各种尺寸"
        reason: "确保图标质量和一致性"
      - field: "图标优化"
        current: "可能存在的质量问题"
        new: "针对不同尺寸优化图标细节"
        reason: "确保在小尺寸下图标仍然清晰可见"
    
    # 调用关系
    called_by:
      - "macOS 应用构建系统"
      - "Xcode 项目配置"
    
    calls:
      - "assets/logo/granostack-logo.svg"

# 架构文档更新
architecture_updates:
  - file: "documents/architecture/widgets/app_logo.yaml"
    changes:
      - field: "widget_categories"
        current_value: "ui_component 分类"
        new_value: "ui_component 分类，同时作为应用图标使用"
        purpose: "明确 AppLogo 组件也可用作应用图标"
        reason: "AppLogo 组件现在被用作 macOS 应用图标"
  
  - file: "documents/architecture/widgets/main_drawer.yaml"
    changes:
      - field: "widget_dependencies"
        current_value: "AppLogo 组件依赖"
        new_value: "AppLogo 组件依赖，与应用图标保持一致"
        purpose: "确保 MainDrawer 中的 Logo 与应用图标一致"
        reason: "MainDrawer 中的 Logo 现在与应用图标使用相同的设计"

# 测试策略
testing_strategy:
  unit_tests:
    description: "测试图标文件的存在和格式"
    coverage_target: "≥80%"
    test_files:
      - "test/macos/app_icon_test.dart"
  
  integration_tests:
    description: "测试 macOS 应用图标在应用中的显示"
    test_files:
      - "test/macos/app_icon_integration_test.dart"
  
  visual_tests:
    description: "测试图标在不同尺寸下的视觉效果"
    test_files:
      - "test/macos/app_icon_visual_test.dart"

# 成功标准
success_criteria:
  - "所有 macOS 图标文件成功更新"
  - "图标使用我们的自定义 Logo 设计"
  - "图标在不同尺寸下都清晰可见"
  - "macOS 应用显示正确的自定义图标"
  - "图标文件格式正确（PNG）"
  - "图标文件大小合理"
  - "通过 macOS 应用构建检查"
  - "图标在 Dock 和 Launchpad 中正确显示"
