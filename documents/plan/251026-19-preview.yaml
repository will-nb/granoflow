title: "优化Inbox滑动操作和推迟逻辑"
description: "改进inbox的滑动提示文字，实现智能推迟逻辑，处理月末边界情况"
date: "2025-10-26"
version: "1.0"

## 当前状态分析

### 现有功能
- Inbox支持左右滑动操作
- 当前提示：`"向左滑移动到回收站，向右滑移动到今日任务"`
- 向右滑直接移动到今日任务

### 问题识别
1. **提示文字不准确**：向右滑不是移动到"今日任务"，而是推迟
2. **推迟逻辑简单**：总是推迟到今日，没有考虑任务当前状态
3. **月末边界问题**：本周六可能比月末更靠后，需要智能处理

## 改进方案

### 1. 提示文字优化
- **修改前**：`"向左滑移动到回收站，向右滑移动到今日任务"`
- **修改后**：`"向左滑归档，向右滑推迟"`

### 2. 智能推迟逻辑设计

#### 推迟规则
根据任务当前所在位置，推动到下一个分组：
- **今天** → **明天**
- **明天** → **本周**（本周六）
- **本周** → **当月**（月末）
- **当月** → **以后**（下个月）

#### 边界情况处理
- **月末问题**：如果本周六比月末更靠后，选择更晚的日期
- **年末问题**：自动处理跨年情况
- **智能选择**：确保推迟日期总是比当前日期更晚

### 3. 技术实现

#### 核心方法
```dart
DateTime _getNextScheduledDate(DateTime currentDueDate) {
  final now = DateTime.now();
  final today = DateTime(now.year, now.month, now.day);
  final tomorrow = today.add(const Duration(days: 1));
  final thisWeekSaturday = _getThisWeekSaturday(today);
  final thisMonthEnd = _getEndOfMonth(today);
  
  // 获取下一个可用的日期
  final nextDates = [tomorrow, thisWeekSaturday, thisMonthEnd];
  
  // 找到第一个比当前日期晚的日期
  for (final nextDate in nextDates) {
    if (nextDate.isAfter(currentDueDate)) {
      return nextDate;
    }
  }
  
  // 如果都更早，则推迟到下个月
  return DateTime(today.year, today.month + 1, 1);
}
```

#### 辅助方法
- `_getThisWeekSaturday()` - 计算本周六日期
- `_getEndOfMonth()` - 计算月末日期
- `_isAfter()` - 日期比较方法

## 实现计划

### 步骤1：分析现有代码
- 查看inbox页面的滑动处理逻辑
- 确认当前提示文字位置
- 了解现有的任务更新API

### 步骤2：实现智能推迟逻辑
- 创建`_getNextScheduledDate`方法
- 实现边界情况处理
- 添加单元测试验证逻辑

### 步骤3：更新UI提示
- 修改提示文字
- 确保UI显示正确

### 步骤4：集成到滑动操作
- 更新向右滑动的处理逻辑
- 调用新的推迟方法
- 保持向左滑动归档功能不变

### 步骤5：测试验证
- 测试各种日期场景
- 验证月末边界情况
- 确保用户体验流畅

## 预期效果

### 用户体验改进
1. **更准确的提示**：用户清楚知道滑动操作的作用
2. **智能推迟**：根据任务状态合理推迟，避免无效操作
3. **边界处理**：自动处理复杂的日期边界情况

### 技术改进
1. **代码复用**：推迟逻辑可以在其他地方复用
2. **可维护性**：清晰的逻辑分离，易于维护
3. **可测试性**：独立的推迟逻辑，便于单元测试

## 风险评估

### 低风险
- 提示文字修改：简单文本更改
- UI更新：不影响现有功能

### 中等风险
- 推迟逻辑：需要充分测试各种日期场景
- 边界情况：月末、年末等特殊情况需要仔细处理

### 缓解措施
- 添加详细的单元测试
- 在测试环境中验证各种日期场景
- 保持向后兼容性

## 验收标准

### 功能验收
1. ✅ 提示文字正确显示"向左滑归档，向右滑推迟"
2. ✅ 向右滑动根据任务状态智能推迟
3. ✅ 月末边界情况正确处理
4. ✅ 向左滑动归档功能保持不变

### 技术验收
1. ✅ 推迟逻辑通过单元测试
2. ✅ 边界情况测试通过
3. ✅ 代码符合项目规范
4. ✅ 性能无明显影响

## 后续优化

### 可能的扩展
1. **自定义推迟规则**：允许用户自定义推迟策略
2. **推迟历史**：记录任务的推迟历史
3. **智能提醒**：根据推迟模式智能提醒用户

### 监控指标
1. **用户使用率**：滑动操作的使用频率
2. **推迟效果**：推迟后任务的完成率
3. **用户反馈**：对新功能的满意度
