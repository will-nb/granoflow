# 13-plan-workflow.mdc - Chat, Plan & Preview Workflow (Updated)

## 单一事实来源（SSOT）
- 以 `documents/architecture/*` 为唯一标准；代码与测试对齐该标准。
- `documents/plan/` 为阶段性材料，仅用于迭代设计与沟通；按归档策略保留索引。

## YAML 文档适用范围（哪些代码需要文档）

### 必须生成 YAML 文档的代码类型
以下代码类型会被 AI 频繁修改，**必须生成 YAML 文档**以防止 AI 幻觉：

- **Widget**（`lib/presentation/widgets/*.dart`）
  - 理由：UI 组件频繁修改，容易引入不必要的依赖或修改属性
  - 模板：`documents/templates/widget_template.yaml`
  - 工具：`scripts/anz yaml:create --type widget --from <dart_file>`

- **Page**（`lib/presentation/*/  *_page.dart`）
  - 理由：页面逻辑复杂，涉及多层依赖和状态管理
  - 模板：`documents/templates/page_template.yaml`
  - 工具：`scripts/anz yaml:create --type page --from <dart_file>`

- **Model**（`lib/data/models/*.dart`）
  - 理由：数据结构变更影响数据库和 API，需要迁移计划
  - 模板：`documents/templates/model_template.yaml`
  - 工具：`scripts/anz yaml:create --type model --from <dart_file>`

- **Provider**（`lib/core/providers/*.dart` 和其他 `*_provider.dart`）
  - 理由：状态管理逻辑，影响全局状态和 UI 更新
  - 模板：`documents/templates/provider_template.yaml`
  - 工具：`scripts/anz yaml:create --type provider --from <dart_file>`

- **Repository**（`lib/data/repositories/*_repository.dart`）
  - 理由：数据访问层，涉及数据库查询和业务逻辑
  - 模板：`documents/templates/repository_template.yaml`
  - 工具：`scripts/anz yaml:create --type repository --from <dart_file>`

- **Service**（`lib/core/services/*_service.dart`）
  - 理由：核心业务逻辑，涉及跨层调用和复杂流程
  - 模板：`documents/templates/service_template.yaml`
  - 工具：`scripts/anz yaml:create --type service --from <dart_file>`

### 不需要生成 YAML 文档的代码类型
以下代码类型稳定且 AI 不应随意修改，**无需 YAML 文档**：

- **常量定义**（`lib/core/config/app_constants.dart` 等）
  - 理由：核心业务规则，修改影响巨大，需人工审核
  - 替代方案：在代码注释中添加警告（见下文）

- **配置文件**（`lib/core/config/*.dart`）
  - 理由：应用级配置，极少修改
  - 替代方案：注释警告

- **枚举类型**（`*.dart` 中的 `enum` 定义）
  - 理由：简单类型定义，风险低
  - 替代方案：无需特殊处理

- **设计令牌**（`lib/core/theme/*.dart`）
  - 理由：由设计师主导，AI 只应引用不应修改
  - 替代方案：注释警告 + Linter 检查（`design_tokens` 字段）

- **生成代码**（`*.g.dart`、`*.freezed.dart` 等）
  - 理由：由 build_runner 自动生成，不应手动编辑
  - 替代方案：Git 忽略或注释说明

- **应用入口**（`main.dart`）
  - 理由：标准化启动流程，极少修改
  - 替代方案：无需特殊处理

- **国际化文件**（`lib/l10n/*.arb`）
  - 理由：专门的 i18n 流程，由翻译工具管理
  - 替代方案：由 `i18n_keys` 字段追踪引用

- **工具类/扩展**（`*_extension.dart`、`*_utils.dart`）
  - 理由：纯函数工具，无状态无副作用，风险低
  - 替代方案：无需特殊处理

- **Mixin**（`*_mixin.dart`）
  - 理由：行为复用，通常不单独修改
  - 替代方案：无需特殊处理

### 不生成 YAML 时的替代方案

#### 方案 1：代码注释警告（针对 Constants/Config/Theme）
在文件和关键定义上添加明确警告：

```dart
/// 应用级常量定义
/// 
/// ⚠️ 警告：此文件包含核心业务规则，AI 不得随意修改！
/// 修改前必须：
/// 1. 与产品经理确认需求变更
/// 2. 检查所有引用此常量的代码（使用 IDE 的 "Find Usages"）
/// 3. 更新相关单元测试和集成测试
/// 4. 考虑数据迁移影响（如标签定义变更会影响现有任务数据）
/// 5. 同步更新国际化文件（lib/l10n/*.arb）
class AppConstants {
  const AppConstants._();
  
  /// 标签定义
  /// 
  /// ⚠️ 修改此列表会影响：
  /// - 数据库中所有现有任务的标签关联
  /// - UI 过滤和显示逻辑
  /// - 搜索和查询功能
  /// - 必须同步更新 lib/l10n/*.arb 中的翻译键
  static const List<TagDefinition> tags = [
    // ...
  ];
}
```

#### 方案 2：Linter 间接检查（针对 Theme）
虽然不为 Theme 生成独立 YAML，但通过其他文档的 `design_tokens` 字段追踪引用：
- Widget/Page YAML 必须声明使用的设计令牌
- Linter 检查这些令牌是否存在于 `lib/core/theme/*.dart`
- 防止硬编码颜色值

#### 方案 3：Git 注释说明（针对生成代码）
在 `.gitignore` 或 `build.yaml` 中添加说明：

```yaml
# build.yaml
# 生成的代码文件（*.g.dart、*.freezed.dart）由 build_runner 自动创建
# 不要手动编辑这些文件，修改请编辑源文件后重新运行：
#   flutter pub run build_runner build --delete-conflicting-outputs
```

### 判断标准决策树

使用以下决策树判断是否需要 YAML 文档：

1. **AI 是否会修改此文件？**
   - 是 → 继续判断
   - 否 → 不需要 YAML

2. **修改频率如何？**
   - 频繁（每次迭代） → 必须 YAML
   - 偶尔（几个月一次） → 可选 YAML
   - 极少（初始化后不变） → 不需要 YAML

3. **修改影响范围？**
   - 影响多个模块/全局状态 → 必须 YAML
   - 仅影响局部逻辑 → 可选 YAML
   - 纯工具函数 → 不需要 YAML

4. **是否有迁移风险？**
   - 有（数据库、API、配置） → 必须 YAML
   - 无 → 视情况而定

### 特殊情况说明

- **Router/Navigation**：虽然不频繁修改，但影响全局导航，建议保留 `documents/architecture/routers.yaml` 作为路由地图
- **Tests**：测试代码本身不需要 YAML，但通过被测代码的 `test_mapping` 字段关联
- **Scripts**：项目脚本（如 `scripts/anz`）不需要 YAML，用 `--help` 和注释说明用法

## 模板与必填字段（模板已更新）
- 所有模板（model/page/widget/provider/repository/service）新增字段：
  - `meta.schema_version`、`meta.last_synced_sha`
  - `source_of_truth`、`called_by`、`calls`
  - `test_mapping`（unit/widget/integration）
  - `i18n_keys`、`design_tokens`
  - `supersedes`、`deprecated_since`
- Provider 增强：`notifier_type`、`state_type`、`exposed_api`
- Model 增强：`collection_version`、`migration_plan`
- 设计令牌：文档中仅使用 token 名（例如 `OceanBreezeColorSchemes.softPink`），禁止直接写色值。

## Plan/Preview/Step/Step-Done 关系与 yaml:create 使用时机

### 工作流阶段
- **Chat 阶段**：需求讨论和分析，产出结构化需求
  - **yaml:create 时机**：如果讨论涉及新的 Widget/Page/Model/Provider/Repository/Service，在进入 Preview 前先使用 `scripts/anz yaml:create --from` 创建对应的架构文档（仅创建必要文档，不对所有代码生成）
  - **目的**：确保 Preview 有准确的架构文档作为基础

- **Preview**：基于架构文档生成，允许 narrative 段（或 spec/*.md）承载叙述，保持 Preview YAML 结构化与可执行
  - **yaml:create 时机**：不在此阶段调用，应在 Chat 阶段已完成架构文档准备

- **Plan**：不复制 Preview 内容，专注实施步骤、依赖与测试映射
  - **yaml:create 时机**：不在此阶段调用

- **Step**：仅实现代码，不涉及 YAML 与测试；用户手测通过后进入 Step-Done
  - **yaml:create 时机**：不在此阶段调用，代码实现完成后由 Step-Done 处理

- **Step-Done**：补充规范 YAML 与测试，运行 pre-commit
  - **yaml:create 时机**：使用 `scripts/anz yaml:create --from` 补充/更新架构 YAML（仅针对六大核心类型）
  - **处理流程**：
    1. 对修改的 Widget/Page/Model/Provider/Repository/Service 调用 `yaml:create --from`
    2. 创建对应测试用例
    3. 运行 pre-commit 校验
    4. 输出建议提交命令（不自动提交）

### yaml:create 使用原则
- **仅针对六大核心类型**：Widget/Page/Model/Provider/Repository/Service
- **不为 Constants/Config/Theme 生成**：这些稳定代码使用注释警告
- **优先合并模式**：更新现有文档时保留人工维护的字段
- **自动校验**：每次创建后自动运行 Linter 验证

## 本地门禁（替代 CI）
- CI 禁用：`.github/workflows/ci.yml` 为禁用占位，启用需 PR 与批准。
- Hooks：
  - `scripts/git-hooks/pre-commit`：
    - 针对改动的 .dart 文件：`dart format --line-length 100` 与 `flutter analyze`
    - 针对改动的 `documents/architecture/*.yaml`：`scripts/architecture_linter.py --files ...`
  - `scripts/git-hooks/pre-push`：
    - `flutter analyze`、`flutter test`（unit+widget）
    - 若存在 `integration_test/` 则尝试运行集成测试
    - 对所有 `documents/architecture/*.yaml` 执行 Linter 全量校验
  - 安装：`bash scripts/setup_hooks.sh`

## Plan 文档归档策略
- 目录：`documents/plan/archive/YYYYMM/`
- 索引：`documents/plan/ARCHIVE_INDEX.yaml`（iteration/type/objective/supersedes/sha/archive_path）
- 当月保留在研项；月度归档并可打包。
- 删除前须入索引，避免链接断裂。

## YAML 一致性细则
- 强制 `file_path` 存在并与类/实现对应。
- `i18n_keys` 必须存在于 `lib/l10n/*.arb`。
- `design_tokens` 必须存在于 `lib/core/theme/` 可解析标识符。
- 路由等字段含冒号或箭头时须加引号（示例：`"plan_button -> push /inbox"`）。

## 前置检查（Preview 前）
1. 本地格式与分析：`dart format`、`flutter analyze`（pre-commit 已自动执行改动范围）。
2. 架构 Linter 精确校验（改动文件）。
3. 基本可运行验证（可选）：`flutter test` 快速集。

## 测试失败处理原则
1. 先使用 `scripts/anz yaml create --from` 修正架构文档使之与预期一致（SSOT）。
2. 再修改代码实现与测试；
3. 保持接口契约与前端调用一致（无特别说明不改 URL/参数/状态码/返回格式）。

## 备份与回滚
- 首次修改 `documents/*` 下 YAML 时，备份至 `documents/temp/<file>.<yymmdd-hhiiss>.yaml.backup`。

## 自动化工具
- `scripts/anz yaml:create`：基于 Dart 文件分析创建/更新架构文档，自动提取类信息、依赖、i18n 键和设计令牌
  - **适用范围**：仅为六大核心类型（Widget/Page/Model/Provider/Repository/Service）生成 YAML 文档
  - **不适用**：Constants/Config/Theme/Enums/Utils/生成代码 不生成 YAML，改用代码注释警告
  - **技术栈**：优先使用 `tools/dart_analyzer.dart`（基于 `package:analyzer` 的精确 AST 分析），降级到正则表达式分析
  - **合并模式**：支持更新现有文档，保留人工维护的字段（如 `description`、`called_by`）
- `scripts/architecture_linter.py`：精确校验架构文档（仅改动文件）。
- `scripts/architecture_bulk_update.py`：批量补齐缺失字段（不覆盖已有值）。
- 依赖图生成（可选）：由 called_by/calls 生成 Mermaid/DOT 图存放于 `documents/architecture/graphs/`。

## 架构文档创建规范
- **禁止 AI 直接创建/覆盖**：不得直接修改 `documents/architecture/*.yaml` 文件。
- **使用标准工具**：必须使用 `scripts/anz yaml:create` 创建/更新架构文档。
- **范围限制**：仅为六大核心类型（Widget/Page/Model/Provider/Repository/Service）生成 YAML 文档
  - Constants/Config/Theme 等稳定代码使用代码注释警告替代
  - 参见"YAML 文档适用范围"章节的完整判断标准
- **模板驱动**：所有架构文档必须基于 `documents/templates/` 下的标准模板。
- **自动分析**：优先使用 `--from` 参数从 Dart 文件自动提取信息（基于 `tools/dart_analyzer.dart`）。
- **自动校验**：创建后自动运行 Linter 校验，确保格式和字段完整性。
- **版本控制**：通过工具创建确保 `schema_version` 和 `last_synced_sha` 字段正确设置。

### 使用示例
```bash
# 从 Dart 文件自动生成 YAML（推荐，自动提取类信息、依赖等）
scripts/anz yaml create --file documents/architecture/widgets/new_component.yaml --type widget --from lib/presentation/widgets/new_component.dart

# 创建空模板（需手动填充所有字段）
scripts/anz yaml create --file documents/architecture/pages/new_page.yaml --type page

# 更新现有文档（重新分析 Dart 文件）
scripts/anz yaml create --file documents/architecture/services/task_service.yaml --type service --from lib/core/services/task_service.dart
```

## PR/评审检查清单（建议写入 PR 模板）
- 架构文档字段齐全且与代码一致；
- 路径合法、依赖图补齐；
- i18n/设计令牌引用正确；
- 测试映射完备、可执行；
- Model 变更含迁移计划；
- Plan 已归档并在索引中登记（若适用）。